package xts.xnsupr.model.views;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.sql.Date;

import oracle.jbo.RowIterator;

import xts.formadf.model.framework.GenericVORowImpl;

import xts.xnsupr.model.entities.TMP_PRF_SRHRSTImpl;
import xts.xnsupr.model.entities.TSP_ALLImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 18 16:59:49 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Blk3Approve2VORowImpl extends GenericVORowImpl {
    public static final int ENTITY_TMP_PRF_SRHRST = 0;
    public static final int ENTITY_TSP_ALL = 1;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        MppfsCod,
        SpalFulnam,
        MppfsScr,
        SpalClsdat,
        SpalSup,
        SpalShp,
        SpalMan,
        SpalMat,
        SpalSupcod,
        SPALCON,
        COUNTTOTAL,
        Blk3Approve22VO;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int MPPFSCOD = AttributesEnum.MppfsCod.index();
    public static final int SPALFULNAM = AttributesEnum.SpalFulnam.index();
    public static final int MPPFSSCR = AttributesEnum.MppfsScr.index();
    public static final int SPALCLSDAT = AttributesEnum.SpalClsdat.index();
    public static final int SPALSUP = AttributesEnum.SpalSup.index();
    public static final int SPALSHP = AttributesEnum.SpalShp.index();
    public static final int SPALMAN = AttributesEnum.SpalMan.index();
    public static final int SPALMAT = AttributesEnum.SpalMat.index();
    public static final int SPALSUPCOD = AttributesEnum.SpalSupcod.index();
    public static final int SPALCON = AttributesEnum.SPALCON.index();
    public static final int COUNTTOTAL = AttributesEnum.COUNTTOTAL.index();
    public static final int BLK3APPROVE22VO = AttributesEnum.Blk3Approve22VO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Blk3Approve2VORowImpl() {
    }

    /**
     * Gets TMP_PRF_SRHRST entity object.
     * @return the TMP_PRF_SRHRST
     */
    public TMP_PRF_SRHRSTImpl getTMP_PRF_SRHRST() {
        return (TMP_PRF_SRHRSTImpl) getEntity(ENTITY_TMP_PRF_SRHRST);
    }

    /**
     * Gets TSP_ALL entity object.
     * @return the TSP_ALL
     */
    public TSP_ALLImpl getTSP_ALL() {
        return (TSP_ALLImpl) getEntity(ENTITY_TSP_ALL);
    }

    /**
     * Gets the attribute value for MPPFS_COD using the alias name MppfsCod.
     * @return the MPPFS_COD
     */
    public String getMppfsCod() {
        return (String) getAttributeInternal(MPPFSCOD);
    }

    /**
     * Sets <code>value</code> as attribute value for MPPFS_COD using the alias name MppfsCod.
     * @param value value to set the MPPFS_COD
     */
    public void setMppfsCod(String value) {
        setAttributeInternal(MPPFSCOD, value);
    }

    /**
     * Gets the attribute value for SPAL_FULNAM using the alias name SpalFulnam.
     * @return the SPAL_FULNAM
     */
    public String getSpalFulnam() {
        return (String) getAttributeInternal(SPALFULNAM);
    }

    /**
     * Sets <code>value</code> as attribute value for SPAL_FULNAM using the alias name SpalFulnam.
     * @param value value to set the SPAL_FULNAM
     */
    public void setSpalFulnam(String value) {
        setAttributeInternal(SPALFULNAM, value);
    }

    /**
     * Gets the attribute value for MPPFS_SCR using the alias name MppfsScr.
     * @return the MPPFS_SCR
     */
    public BigDecimal getMppfsScr() {
        return (BigDecimal) getAttributeInternal(MPPFSSCR);
    }

    /**
     * Sets <code>value</code> as attribute value for MPPFS_SCR using the alias name MppfsScr.
     * @param value value to set the MPPFS_SCR
     */
    public void setMppfsScr(BigDecimal value) {
        setAttributeInternal(MPPFSSCR, value);
    }

    /**
     * Gets the attribute value for SPAL_CLSDAT using the alias name SpalClsdat.
     * @return the SPAL_CLSDAT
     */
    public Timestamp getSpalClsdat() {
        return (Timestamp) getAttributeInternal(SPALCLSDAT);
    }

    /**
     * Sets <code>value</code> as attribute value for SPAL_CLSDAT using the alias name SpalClsdat.
     * @param value value to set the SPAL_CLSDAT
     */
    public void setSpalClsdat(Timestamp value) {
        setAttributeInternal(SPALCLSDAT, value);
    }

    /**
     * Gets the attribute value for SPAL_SUP using the alias name SpalSup.
     * @return the SPAL_SUP
     */
    public String getSpalSup() {
        return (String) getAttributeInternal(SPALSUP);
    }

    /**
     * Sets <code>value</code> as attribute value for SPAL_SUP using the alias name SpalSup.
     * @param value value to set the SPAL_SUP
     */
    public void setSpalSup(String value) {
        setAttributeInternal(SPALSUP, value);
    }

    /**
     * Gets the attribute value for SPAL_SHP using the alias name SpalShp.
     * @return the SPAL_SHP
     */
    public String getSpalShp() {
        return (String) getAttributeInternal(SPALSHP);
    }

    /**
     * Sets <code>value</code> as attribute value for SPAL_SHP using the alias name SpalShp.
     * @param value value to set the SPAL_SHP
     */
    public void setSpalShp(String value) {
        setAttributeInternal(SPALSHP, value);
    }

    /**
     * Gets the attribute value for SPAL_MAN using the alias name SpalMan.
     * @return the SPAL_MAN
     */
    public String getSpalMan() {
        return (String) getAttributeInternal(SPALMAN);
    }

    /**
     * Sets <code>value</code> as attribute value for SPAL_MAN using the alias name SpalMan.
     * @param value value to set the SPAL_MAN
     */
    public void setSpalMan(String value) {
        setAttributeInternal(SPALMAN, value);
    }

    /**
     * Gets the attribute value for SPAL_MAT using the alias name SpalMat.
     * @return the SPAL_MAT
     */
    public String getSpalMat() {
        return (String) getAttributeInternal(SPALMAT);
    }

    /**
     * Sets <code>value</code> as attribute value for SPAL_MAT using the alias name SpalMat.
     * @param value value to set the SPAL_MAT
     */
    public void setSpalMat(String value) {
        setAttributeInternal(SPALMAT, value);
    }

    /**
     * Gets the attribute value for SPAL_SUPCOD using the alias name SpalSupcod.
     * @return the SPAL_SUPCOD
     */
    public String getSpalSupcod() {
        return (String) getAttributeInternal(SPALSUPCOD);
    }

    /**
     * Sets <code>value</code> as attribute value for SPAL_SUPCOD using the alias name SpalSupcod.
     * @param value value to set the SPAL_SUPCOD
     */
    public void setSpalSupcod(String value) {
        setAttributeInternal(SPALSUPCOD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SPALCON.
     * @return the SPALCON
     */
    public String getSPALCON() {
        return (String) getAttributeInternal(SPALCON);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SPALCON.
     * @param value value to set the  SPALCON
     */
    public void setSPALCON(String value) {
        setAttributeInternal(SPALCON, value);
    }


    /**
     * Gets the attribute value for the calculated attribute COUNTTOTAL.
     * @return the COUNTTOTAL
     */
    public BigDecimal getCOUNTTOTAL() {
        return (BigDecimal) getAttributeInternal(COUNTTOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute COUNTTOTAL.
     * @param value value to set the  COUNTTOTAL
     */
    public void setCOUNTTOTAL(BigDecimal value) {
        setAttributeInternal(COUNTTOTAL, value);
    }


    // Start : Generated Code


    /**
     * Gets the associated <code>RowIterator</code> using master-detail link Blk3Approve22VO.
     */
    public RowIterator getBlk3Approve22VO() {
        return (RowIterator) getAttributeInternal(BLK3APPROVE22VO);
    }

   
   
   
    public void setMppfsScr_noVal(BigDecimal value){
       setAttributeInternal(MPPFSSCR, value);
    }
    public void setMppfsScr_noVal(String value){
       BigDecimal value1 = String2BigDecimal(value);
       setAttributeInternal(MPPFSSCR, value1);
    }
   
    public void setSpalFulnam_noVal(String value){
       setAttributeInternal(SPALFULNAM, value);
    }
   
    public void setMppfsCod_noVal(String value){
       setAttributeInternal(MPPFSCOD, value);
    }
  
   
    public void setSpalClsdat(Date value){
       setAttributeInternal(SPALCLSDAT, value);
    }
    public void setSpalClsdat_noVal(Date value){
       setAttributeInternal(SPALCLSDAT, value);
    }
    public void setSpalClsdat_noVal(String value){
       Date value1 = String2Date(value);
       setAttributeInternal(SPALCLSDAT, value1);
    }
   
    public void setSpalSup_noVal(String value){
       setAttributeInternal(SPALSUP, value);
    }
   
    public void setSpalShp_noVal(String value){
       setAttributeInternal(SPALSHP, value);
    }
   
    public void setSpalMan_noVal(String value){
       setAttributeInternal(SPALMAN, value);
    }
    
    public void setSpalMat_noVal(String value){
       setAttributeInternal(SPALMAT, value);
    }
    public BigDecimal getCountTotal(){
       return (BigDecimal)getAttributeInternal(COUNTTOTAL);
    }
    public void setCountTotal(BigDecimal value){
       populateAttribute(COUNTTOTAL, value);
    }
    public void setCountTotal_noVal(BigDecimal value){
       populateAttribute(COUNTTOTAL, value);
    }
//    public void setCountTotal_noVal(String value){
//       BigDecimal value1 = String2BigDecimal(value);
//       setAttributeInternal(COUNTTOTAL, value1);
//    }
   
   
   
   
    public String getSpalCon(){
       return (String)getAttributeInternal(SPALCON);
    }
    public void setSpalCon(String value){
       setAttributeInternal(SPALCON, value);
    }
    public void setSpalCon_noVal(String value){
       setAttributeInternal(SPALCON, value);
    }

    
    
    // End : Generated Code
}

