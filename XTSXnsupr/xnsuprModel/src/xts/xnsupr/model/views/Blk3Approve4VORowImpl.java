package xts.xnsupr.model.views;

import java.math.BigDecimal;

import java.sql.Date;

import java.util.HashMap;

import oracle.jbo.JboException;
import oracle.jbo.RowSet;
import oracle.jbo.server.ViewAttributeDefImpl;

import xts.formadf.model.framework.GenericProgrammaticViewRowImpl;

import xts.xnsupr.model.services.xnsuprAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 18 16:45:33 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Blk3Approve4VORowImpl extends GenericProgrammaticViewRowImpl {
    /**
     * createRowData - for custom java data source support.
     * Overridden to initialize the dataProvier for newly created row.
     * Used for updateable View Objects.
     */
    public Object createRowData(HashMap attrNameValueMap) {
        Object value = super.createRowData(attrNameValueMap);
        return value;
    }

    /**
     * convertToSourceType - for custom java data source support.
     * Overridden to provide custom implementation for conversions of a value
     * from attribute java type to datasource column/field type.
     * Not required in most cases.
     */
    public Object convertToSourceType(ViewAttributeDefImpl attrDef, String sourceType, Object val) {
        Object value = super.convertToSourceType(attrDef, sourceType, val);
        return value;
    }

    /**
     * convertToAttributeType - for custom java data source support.
     * Overridden to provide custom implementation for conversions of a value
     *  from datasource/column field type to attribute java type.
     * Not required in most cases.
     */
    public Object convertToAttributeType(ViewAttributeDefImpl attrDef, Class javaTypeClass, Object val) {
        Object value = super.convertToAttributeType(attrDef, javaTypeClass, val);
        return value;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Key1,
        MppfcGrp,
        MppfcFulnama4,
        MppfcFulnamLocala4,
        MppfcPrfcod,
        ShortName,
        MppfcSup,
        MppfcShp,
        MppfcMan,
        MppfcMat,
        MppfcTmpConsubrol,
        MppfcCon,
        MppfcConsubrol,
        MppfcConsubrolDesc,
        MppfcAdr1,
        MppfcAdr2,
        MppfcAdr3,
        MppfcAdr4,
        MppfcAdr1Local,
        MppfcAdr2Local,
        MppfcAdr3Local,
        MppfcAdr4Local,
        MppfcCtycod,
        LovCtycod,
        CtycodDes,
        MppfcLoccod,
        LovLoccod,
        LocDes,
        MppfcRmk,
        MppfcSbmby,
        MppfcSbmbyDivision,
        MppfcSbmbyFulnam,
        MppfcSbmdata4,
        ButReject,
        ButPrev,
        ButApprove,
        ButExit,
        consub,
        MpcyCtycodLovVO1,
        MpclLoccodApvLovVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int KEY1 = AttributesEnum.Key1.index();
    public static final int MPPFCGRP = AttributesEnum.MppfcGrp.index();
    public static final int MPPFCFULNAMA4 = AttributesEnum.MppfcFulnama4.index();
    public static final int MPPFCFULNAMLOCALA4 = AttributesEnum.MppfcFulnamLocala4.index();
    public static final int MPPFCPRFCOD = AttributesEnum.MppfcPrfcod.index();
    public static final int SHORTNAME = AttributesEnum.ShortName.index();
    public static final int MPPFCSUP = AttributesEnum.MppfcSup.index();
    public static final int MPPFCSHP = AttributesEnum.MppfcShp.index();
    public static final int MPPFCMAN = AttributesEnum.MppfcMan.index();
    public static final int MPPFCMAT = AttributesEnum.MppfcMat.index();
    public static final int MPPFCTMPCONSUBROL = AttributesEnum.MppfcTmpConsubrol.index();
    public static final int MPPFCCON = AttributesEnum.MppfcCon.index();
    public static final int MPPFCCONSUBROL = AttributesEnum.MppfcConsubrol.index();
    public static final int MPPFCCONSUBROLDESC = AttributesEnum.MppfcConsubrolDesc.index();
    public static final int MPPFCADR1 = AttributesEnum.MppfcAdr1.index();
    public static final int MPPFCADR2 = AttributesEnum.MppfcAdr2.index();
    public static final int MPPFCADR3 = AttributesEnum.MppfcAdr3.index();
    public static final int MPPFCADR4 = AttributesEnum.MppfcAdr4.index();
    public static final int MPPFCADR1LOCAL = AttributesEnum.MppfcAdr1Local.index();
    public static final int MPPFCADR2LOCAL = AttributesEnum.MppfcAdr2Local.index();
    public static final int MPPFCADR3LOCAL = AttributesEnum.MppfcAdr3Local.index();
    public static final int MPPFCADR4LOCAL = AttributesEnum.MppfcAdr4Local.index();
    public static final int MPPFCCTYCOD = AttributesEnum.MppfcCtycod.index();
    public static final int LOVCTYCOD = AttributesEnum.LovCtycod.index();
    public static final int CTYCODDES = AttributesEnum.CtycodDes.index();
    public static final int MPPFCLOCCOD = AttributesEnum.MppfcLoccod.index();
    public static final int LOVLOCCOD = AttributesEnum.LovLoccod.index();
    public static final int LOCDES = AttributesEnum.LocDes.index();
    public static final int MPPFCRMK = AttributesEnum.MppfcRmk.index();
    public static final int MPPFCSBMBY = AttributesEnum.MppfcSbmby.index();
    public static final int MPPFCSBMBYDIVISION = AttributesEnum.MppfcSbmbyDivision.index();
    public static final int MPPFCSBMBYFULNAM = AttributesEnum.MppfcSbmbyFulnam.index();
    public static final int MPPFCSBMDATA4 = AttributesEnum.MppfcSbmdata4.index();
    public static final int BUTREJECT = AttributesEnum.ButReject.index();
    public static final int BUTPREV = AttributesEnum.ButPrev.index();
    public static final int BUTAPPROVE = AttributesEnum.ButApprove.index();
    public static final int BUTEXIT = AttributesEnum.ButExit.index();
    public static final int CONSUB = AttributesEnum.consub.index();
    public static final int MPCYCTYCODLOVVO1 = AttributesEnum.MpcyCtycodLovVO1.index();
    public static final int MPCLLOCCODAPVLOVVO1 = AttributesEnum.MpclLoccodApvLovVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public Blk3Approve4VORowImpl() {
    }
    
    public xnsuprAMImpl getAM(){
        return (xnsuprAMImpl) getApplicationModule();
    }

    
    // Start : Generated Code

    /**
     * Gets the attribute value for the calculated attribute Key1.
     * @return the Key1
     */
    public BigDecimal getKey1() {
        return (BigDecimal) getAttributeInternal(KEY1);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Key1.
     * @param value value to set the  Key1
     */
    public void setKey1(BigDecimal value) {
        setAttributeInternal(KEY1, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcGrp.
     * @return the MppfcGrp
     */
    public String getMppfcGrp() {
        return (String) getAttributeInternal(MPPFCGRP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcGrp.
     * @param value value to set the  MppfcGrp
     */
    public void setMppfcGrp(String value) 
    {
        setAttributeInternal(MPPFCGRP, value.toUpperCase());
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcFulnam.
     * @return the MppfcFulnam
     */
    public String getMppfcFulnama4() {
        return (String) getAttributeInternal(MPPFCFULNAMA4);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcFulnam.
     * @param value value to set the  MppfcFulnam
     */
    public void setMppfcFulnama4(String value) 
    {
        if(null!=value)
        setAttributeInternal(MPPFCFULNAMA4, value.toUpperCase());
        else
        setAttributeInternal(MPPFCFULNAMA4, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcFulnamLocal.
     * @return the MppfcFulnamLocal
     */
    public String getMppfcFulnamLocala4() {
        return (String) getAttributeInternal(MPPFCFULNAMLOCALA4);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcFulnamLocal.
     * @param value value to set the  MppfcFulnamLocal
     */
    public void setMppfcFulnamLocala4(String value) {
        if(null!=value)
        setAttributeInternal(MPPFCFULNAMLOCALA4, value.toUpperCase());
        else
        setAttributeInternal(MPPFCFULNAMLOCALA4, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcPrfcod.
     * @return the MppfcPrfcod
     */
    public String getMppfcPrfcod() {
        return (String) getAttributeInternal(MPPFCPRFCOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcPrfcod.
     * @param value value to set the  MppfcPrfcod
     */
    public void setMppfcPrfcod(String value) {
        if(null!=value)
        setAttributeInternal(MPPFCPRFCOD, value.toUpperCase());
        else
        setAttributeInternal(MPPFCPRFCOD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ShortName.
     * @return the ShortName
     */
    public String getShortName() {
        return (String) getAttributeInternal(SHORTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ShortName.
     * @param value value to set the  ShortName
     */
    public void setShortName(String value) {
        if(null!=value)
        setAttributeInternal(SHORTNAME, value.toUpperCase());
        else
        setAttributeInternal(SHORTNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcSup.
     * @return the MppfcSup
     */
    public String getMppfcSup() {
        return (String) getAttributeInternal(MPPFCSUP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcSup.
     * @param value value to set the  MppfcSup
     */
    public void setMppfcSup(String value) {
    
         String oldValue = getMppfcSup();
         try{
             setAttributeInternal(MPPFCSUP, value);
            getAM().getBlk3Approve4VOFieldEvents().MppfcSup_cc();
         } catch(JboException e){
             setAttributeInternal(MPPFCSUP,oldValue);
             throw(e);
         } 
        
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcShp.
     * @return the MppfcShp
     */
    public String getMppfcShp() {
        return (String) getAttributeInternal(MPPFCSHP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcShp.
     * @param value value to set the  MppfcShp
     */
    public void setMppfcShp(String value) {
        
        String oldValue = getMppfcShp();
        try{
            setAttributeInternal(MPPFCSHP, value);
           getAM().getBlk3Approve4VOFieldEvents().MppfcShp_cc();
        } catch(JboException e){
            setAttributeInternal(MPPFCSHP,oldValue);
            throw(e);
        } 
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcMan.
     * @return the MppfcMan
     */
    public String getMppfcMan() {
        return (String) getAttributeInternal(MPPFCMAN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcMan.
     * @param value value to set the  MppfcMan
     */
    public void setMppfcMan(String value) {
        String oldValue = getMppfcMan();
        try{
            setAttributeInternal(MPPFCMAN, value);
           getAM().getBlk3Approve4VOFieldEvents().MppfcMan_cc();
        } catch(JboException e){
            setAttributeInternal(MPPFCMAN,oldValue);
            throw(e);
        } 
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcMat.
     * @return the MppfcMat
     */
    public String getMppfcMat() {
        return (String) getAttributeInternal(MPPFCMAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcMat.
     * @param value value to set the  MppfcMat
     */
    public void setMppfcMat(String value) 
    {
         String oldValue = getMppfcMat();
         try{
             setAttributeInternal(MPPFCMAT, value);
             //Blk3Insert1VOFieldEvents.NewRoleSupp_cc();
             getAM().getBlk3Approve4VOFieldEvents().MppfcMat_cc();
         } catch(JboException e){
             setAttributeInternal(MPPFCMAT,oldValue);
             throw(e);
         } 
        
     }

    /**
     * Gets the attribute value for the calculated attribute MppfcTmpConsubrol.
     * @return the MppfcTmpConsubrol
     */
    public String getMppfcTmpConsubrol() {
        return (String) getAttributeInternal(MPPFCTMPCONSUBROL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcTmpConsubrol.
     * @param value value to set the  MppfcTmpConsubrol
     */
    public void setMppfcTmpConsubrol(String value) {
        setAttributeInternal(MPPFCTMPCONSUBROL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcCon.
     * @return the MppfcCon
     */
    public String getMppfcCon() {
        return (String) getAttributeInternal(MPPFCCON);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcCon.
     * @param value value to set the  MppfcCon
     */
    public void setMppfcCon(String value) {
        String oldValue = getMppfcCon();
       
        try
        {
            setAttributeInternal(MPPFCCON, value);
            //Blk3Insert1VOFieldEvents.NewRoleSupp_cc();
            getAM().getBlk3Approve4VOFieldEvents().MppfcCon_cc();
            

        }
        
        
        catch(JboException e){
            setAttributeInternal(MPPFCCON,oldValue);
            throw(e);
        } 
        
        
      
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcConsubrol.
     * @return the MppfcConsubrol
     */
    public String getMppfcConsubrol() {
        return (String) getAttributeInternal(MPPFCCONSUBROL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcConsubrol.
     * @param value value to set the  MppfcConsubrol
     */
    public void setMppfcConsubrol(String value) {
        setAttributeInternal(MPPFCCONSUBROL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcConsubrolDesc.
     * @return the MppfcConsubrolDesc
     */
    public String getMppfcConsubrolDesc() {
        return (String) getAttributeInternal(MPPFCCONSUBROLDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcConsubrolDesc.
     * @param value value to set the  MppfcConsubrolDesc
     */
    public void setMppfcConsubrolDesc(String value) {
        setAttributeInternal(MPPFCCONSUBROLDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcAdr1.
     * @return the MppfcAdr1
     */
    public String getMppfcAdr1() {
        return (String) getAttributeInternal(MPPFCADR1);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcAdr1.
     * @param value value to set the  MppfcAdr1
     */
    public void setMppfcAdr1(String value) {
        setAttributeInternal(MPPFCADR1, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcAdr2.
     * @return the MppfcAdr2
     */
    public String getMppfcAdr2() {
        return (String) getAttributeInternal(MPPFCADR2);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcAdr2.
     * @param value value to set the  MppfcAdr2
     */
    public void setMppfcAdr2(String value) {
        setAttributeInternal(MPPFCADR2, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcAdr3.
     * @return the MppfcAdr3
     */
    public String getMppfcAdr3() {
        return (String) getAttributeInternal(MPPFCADR3);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcAdr3.
     * @param value value to set the  MppfcAdr3
     */
    public void setMppfcAdr3(String value) {
        setAttributeInternal(MPPFCADR3, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcAdr4.
     * @return the MppfcAdr4
     */
    public String getMppfcAdr4() {
        return (String) getAttributeInternal(MPPFCADR4);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcAdr4.
     * @param value value to set the  MppfcAdr4
     */
    public void setMppfcAdr4(String value) {
        setAttributeInternal(MPPFCADR4, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcAdr1Local.
     * @return the MppfcAdr1Local
     */
    public String getMppfcAdr1Local() {
        return (String) getAttributeInternal(MPPFCADR1LOCAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcAdr1Local.
     * @param value value to set the  MppfcAdr1Local
     */
    public void setMppfcAdr1Local(String value) {
        setAttributeInternal(MPPFCADR1LOCAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcAdr2Local.
     * @return the MppfcAdr2Local
     */
    public String getMppfcAdr2Local() {
        return (String) getAttributeInternal(MPPFCADR2LOCAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcAdr2Local.
     * @param value value to set the  MppfcAdr2Local
     */
    public void setMppfcAdr2Local(String value) {
        setAttributeInternal(MPPFCADR2LOCAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcAdr3Local.
     * @return the MppfcAdr3Local
     */
    public String getMppfcAdr3Local() {
        return (String) getAttributeInternal(MPPFCADR3LOCAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcAdr3Local.
     * @param value value to set the  MppfcAdr3Local
     */
    public void setMppfcAdr3Local(String value) {
        setAttributeInternal(MPPFCADR3LOCAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcAdr4Local.
     * @return the MppfcAdr4Local
     */
    public String getMppfcAdr4Local() {
        return (String) getAttributeInternal(MPPFCADR4LOCAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcAdr4Local.
     * @param value value to set the  MppfcAdr4Local
     */
    public void setMppfcAdr4Local(String value) {
        setAttributeInternal(MPPFCADR4LOCAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcCtycod.
     * @return the MppfcCtycod
     */
    public String getMppfcCtycod() {
        return (String) getAttributeInternal(MPPFCCTYCOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcCtycod.
     * @param value value to set the  MppfcCtycod
     */
    public void setMppfcCtycod(String value) 
    {
        String oldValue = getMppfcCtycod();
        try
        {
            getAM().getBlk3Approve4VOFieldEvents().MppfcCtycod_pot();
            if(null!=value)
            setAttributeInternal(MPPFCCTYCOD, value.toUpperCase());
            else
             setAttributeInternal(MPPFCCTYCOD, value);
         }
        catch(JboException  e)
        {
           // setAttributeInternal(PMCCVCUSCOD, oldValue);
            setAttributeInternal(MPPFCCTYCOD, oldValue);
        }
        
        
    }

    /**
     * Gets the attribute value for the calculated attribute LovCtycod.
     * @return the LovCtycod
     */
    public String getLovCtycod() {
        return (String) getAttributeInternal(LOVCTYCOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LovCtycod.
     * @param value value to set the  LovCtycod
     */
    public void setLovCtycod(String value) {
        setAttributeInternal(LOVCTYCOD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CtycodDes.
     * @return the CtycodDes
     */
    public String getCtycodDes() {
        return (String) getAttributeInternal(CTYCODDES);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CtycodDes.
     * @param value value to set the  CtycodDes
     */
    public void setCtycodDes(String value) {
        setAttributeInternal(CTYCODDES, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcLoccod.
     * @return the MppfcLoccod
     */
    public String getMppfcLoccod() {
        return (String) getAttributeInternal(MPPFCLOCCOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcLoccod.
     * @param value value to set the  MppfcLoccod
     */
    public void setMppfcLoccod(String value) {
        
        String oldValue = getMppfcLoccod();
        try{
            getAM().getBlk3Approve4VOFieldEvents().MppfcLoccod_pot();
             if(null!=value)
             setAttributeInternal(MPPFCLOCCOD, value.toUpperCase());
             else
             setAttributeInternal(MPPFCLOCCOD, value);
         }
        catch(JboException  e){
           
            setAttributeInternal(MPPFCLOCCOD, oldValue);
        }
        
    }

    /**
     * Gets the attribute value for the calculated attribute LovLoccod.
     * @return the LovLoccod
     */
    public String getLovLoccod() {
        return (String) getAttributeInternal(LOVLOCCOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LovLoccod.
     * @param value value to set the  LovLoccod
     */
    public void setLovLoccod(String value) {
        setAttributeInternal(LOVLOCCOD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LocDes.
     * @return the LocDes
     */
    public String getLocDes() {
        return (String) getAttributeInternal(LOCDES);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LocDes.
     * @param value value to set the  LocDes
     */
    public void setLocDes(String value) {
        setAttributeInternal(LOCDES, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcRmk.
     * @return the MppfcRmk
     */
    public String getMppfcRmk() {
        return (String) getAttributeInternal(MPPFCRMK);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcRmk.
     * @param value value to set the  MppfcRmk
     */
    public void setMppfcRmk(String value) {
        setAttributeInternal(MPPFCRMK, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcSbmby.
     * @return the MppfcSbmby
     */
    public String getMppfcSbmby() {
        return (String) getAttributeInternal(MPPFCSBMBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcSbmby.
     * @param value value to set the  MppfcSbmby
     */
    public void setMppfcSbmby(String value) {
        setAttributeInternal(MPPFCSBMBY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcSbmbyDivision.
     * @return the MppfcSbmbyDivision
     */
    public String getMppfcSbmbyDivision() {
        return (String) getAttributeInternal(MPPFCSBMBYDIVISION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcSbmbyDivision.
     * @param value value to set the  MppfcSbmbyDivision
     */
    public void setMppfcSbmbyDivision(String value) {
        setAttributeInternal(MPPFCSBMBYDIVISION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcSbmbyFulnam.
     * @return the MppfcSbmbyFulnam
     */
    public String getMppfcSbmbyFulnam() {
        return (String) getAttributeInternal(MPPFCSBMBYFULNAM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcSbmbyFulnam.
     * @param value value to set the  MppfcSbmbyFulnam
     */
    public void setMppfcSbmbyFulnam(String value) {
        setAttributeInternal(MPPFCSBMBYFULNAM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcSbmdata4.
     * @return the MppfcSbmdata4
     */
    public Date getMppfcSbmdata4() {
        return (Date) getAttributeInternal(MPPFCSBMDATA4);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcSbmdata4.
     * @param value value to set the  MppfcSbmdata4
     */
    public void setMppfcSbmdata4(Date value) {
        setAttributeInternal(MPPFCSBMDATA4, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MppfcSbmdat.
     * @return the MppfcSbmdat
     */
    public Date getMppfcSbmdat() {
        return (Date) getAttributeInternal(MPPFCSBMDATA4);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MppfcSbmdat.
     * @param value value to set the  MppfcSbmdat
     */
    public void setMppfcSbmdat(Date value) {
        setAttributeInternal(MPPFCSBMDATA4, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ButReject.
     * @return the ButReject
     */
    public String getButReject() {
        return (String) getAttributeInternal(BUTREJECT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ButReject.
     * @param value value to set the  ButReject
     */
    public void setButReject(String value) {
        setAttributeInternal(BUTREJECT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ButPrev.
     * @return the ButPrev
     */
    public String getButPrev() {
        return (String) getAttributeInternal(BUTPREV);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ButPrev.
     * @param value value to set the  ButPrev
     */
    public void setButPrev(String value) {
        setAttributeInternal(BUTPREV, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ButApprove.
     * @return the ButApprove
     */
    public String getButApprove() {
        return (String) getAttributeInternal(BUTAPPROVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ButApprove.
     * @param value value to set the  ButApprove
     */
    public void setButApprove(String value) {
        setAttributeInternal(BUTAPPROVE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ButExit.
     * @return the ButExit
     */
    public String getButExit() {
        return (String) getAttributeInternal(BUTEXIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ButExit.
     * @param value value to set the  ButExit
     */
    public void setButExit(String value) {
        setAttributeInternal(BUTEXIT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute consub.
     * @return the consub
     */
    public Boolean getconsub() {
        return (Boolean) getAttributeInternal(CONSUB);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute consub.
     * @param value value to set the  consub
     */
    public void setconsub(Boolean value) {
        setAttributeInternal(CONSUB, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MpcyCtycodLovVO1.
     */
    public RowSet getMpcyCtycodLovVO1() {
        return (RowSet) getAttributeInternal(MPCYCTYCODLOVVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> MpclLoccodApvLovVO1.
     */
    public RowSet getMpclLoccodApvLovVO1() {
        return (RowSet) getAttributeInternal(MPCLLOCCODAPVLOVVO1);
    }

    public void setMppfcSup_noVal(String value){
       setAttributeInternal(MPPFCSUP, value);
    }

    public void setMppfcFulnam_noVal(String value){
       setAttributeInternal(MPPFCFULNAMA4, value);
    }

    public void setMppfcGrp_noVal(String value){
       setAttributeInternal(MPPFCGRP, value.toUpperCase());
    }

    public void setMppfcFulnamLocal_noVal(String value){
       setAttributeInternal(MPPFCFULNAMLOCALA4, value);
    }

    public void setMppfcPrfcod_noVal(String value){
       setAttributeInternal(MPPFCPRFCOD, value);
    }

    public void setShortName_noVal(String value){
       setAttributeInternal(SHORTNAME, value);
    }

    public void setMppfcMat_noVal(String value){
       setAttributeInternal(MPPFCMAT, value);
    }

    public void setMppfcShp_noVal(String value){
       setAttributeInternal(MPPFCSHP, value);
    }

    public void setMppfcMan_noVal(String value){
       setAttributeInternal(MPPFCMAN, value);
    }

    public void setMppfcAdr2_noVal(String value){
       setAttributeInternal(MPPFCADR2, value);
    }

    public void setMppfcAdr3_noVal(String value){
       setAttributeInternal(MPPFCADR3, value);
    }

    public void setMppfcConsubrolDesc_noVal(String value){
       setAttributeInternal(MPPFCCONSUBROLDESC, value);
    }

    public void setMppfcAdr1_noVal(String value){
       setAttributeInternal(MPPFCADR1, value);
    }

    public void setMppfcAdr2Local_noVal(String value){
       setAttributeInternal(MPPFCADR2LOCAL, value);
    }

    public void setMppfcAdr3Local_noVal(String value){
       setAttributeInternal(MPPFCADR3LOCAL, value);
    }

    public void setMppfcAdr4_noVal(String value){
       setAttributeInternal(MPPFCADR4, value);
    }

    public void setMppfcAdr1Local_noVal(String value){
       setAttributeInternal(MPPFCADR1LOCAL, value);
    }

    public void setMppfcCon_noVal(String value)
    {
       setAttributeInternal(MPPFCCON, value);
 
    }

    public void setMppfcTmpConsubrol_noVal(String value){
       setAttributeInternal(MPPFCTMPCONSUBROL, value);
    }

    public void setMppfcConsubrol_noVal(String value)
    {
       setAttributeInternal(MPPFCCONSUBROL, value);
    }

    public void setMppfcRmk_noVal(String value){
       setAttributeInternal(MPPFCRMK, value);
    }

    public void setLocDes_noVal(String value){
       setAttributeInternal(LOCDES, value);
    }

    public void setMppfcSbmbyDivision_noVal(String value){
       setAttributeInternal(MPPFCSBMBYDIVISION, value);
    }

    public void setMppfcSbmby_noVal(String value){
       setAttributeInternal(MPPFCSBMBY, value);
    }

    public void setMppfcSbmdat_noVal(Date value){
       setAttributeInternal(MPPFCSBMDATA4, value);
    }
    public void setMppfcSbmdat_noVal(String value){
       Date value1 = String2Date(value);
       setAttributeInternal(MPPFCSBMDATA4, value1);
    }

    public void setMppfcSbmbyFulnam_noVal(String value){
       setAttributeInternal(MPPFCSBMBYFULNAM, value);
    }

    public void setButReject_noVal(String value){
       setAttributeInternal(BUTREJECT, value);
    }

    public void setMppfcCtycod_noVal(String value){
       setAttributeInternal(MPPFCCTYCOD, value);
    }

    public void setMppfcAdr4Local_noVal(String value){
       setAttributeInternal(MPPFCADR4LOCAL, value);
    }

    public void setLovCtycod_noVal(String value){
       setAttributeInternal(LOVCTYCOD, value);
    }

    public void setMppfcLoccod_noVal(String value){
       setAttributeInternal(MPPFCLOCCOD, value);
    }

    public void setCtycodDes_noVal(String value){
       setAttributeInternal(CTYCODDES, value);
    }

    public void setLovLoccod_noVal(String value){
       setAttributeInternal(LOVLOCCOD, value);
    }

    public void setButPrev_noVal(String value){
       setAttributeInternal(BUTPREV, value);
    }

    public void setButApprove_noVal(String value){
       setAttributeInternal(BUTAPPROVE, value);
    }

    public void setButExit_noVal(String value){
       setAttributeInternal(BUTEXIT, value);
    }
    

    
    // End : Generated Code
    
   /* String oldValue = getNewRoleSupp();
    try{
        setAttributeInternal(NEWROLESUPP, value);
        //Blk3Insert1VOFieldEvents.NewRoleSupp_cc();
        getAM().getBlk3Insert1VOFieldEvents().NewRoleSupp_cc();
    } catch(JboException e){
        setAttributeInternal(NEWROLESUPP,oldValue);
        throw(e);
    } */
}

