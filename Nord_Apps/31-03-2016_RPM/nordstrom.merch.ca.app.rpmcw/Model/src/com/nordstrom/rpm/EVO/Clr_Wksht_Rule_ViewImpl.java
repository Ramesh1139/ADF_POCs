package com.nordstrom.rpm.EVO;

import com.nordstrom.rpm.EVO.common.Clr_Wksht_Rule_View;

import java.util.Iterator;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 14 18:57:39 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class Clr_Wksht_Rule_ViewImpl extends ViewObjectImpl implements Clr_Wksht_Rule_View {
    /**
     * This is the default constructor (do not remove).
     */
    public Clr_Wksht_Rule_ViewImpl() {
    }

    /**
     * Returns the variable value for bind_RuleID.
     * @return variable value for bind_RuleID
     */
    public String getbind_RuleID() {
        return (String)ensureVariableManager().getVariableValue("bind_RuleID");
    }

    /**
     * Sets <code>value</code> for variable bind_RuleID.
     * @param value value to bind as bind_RuleID
     */
    public void setbind_RuleID(String value) {
        ensureVariableManager().setVariableValue("bind_RuleID", value);
    }
    
    public void clearAllCache() {     
      ViewRowSetImpl drsi = super.getDefaultRowSetInternal();
      while(drsi.hasNext()) {
        Row item = drsi.next();
      }

      Iterator iter = super.getEntityDef(0).getAllEntityInstancesIterator(this.getDBTransaction());
      while(iter.hasNext()) {
        EntityImpl entityItem = (EntityImpl) iter.next();
        if(entityItem.getEntityState() == EntityImpl.STATUS_NEW ||
          entityItem.getEntityState() == EntityImpl.STATUS_DELETED) {
          entityItem.refresh(EntityImpl.REFRESH_REMOVE_NEW_ROWS | 
      EntityImpl.REFRESH_UNDO_CHANGES);
        }
      }
      getViewObject().clearCache();
    }
    
    public void revertChangesCurrentRow(Row curRow) {
        if (curRow != null) {
            curRow.refresh(Row.REFRESH_UNDO_CHANGES | Row.REFRESH_WITH_DB_FORGET_CHANGES);
        }
    }

    
    public void rollbackOrRevertRowChanges() {
        ViewObject Clr_Wksht_Rule_View = this;
        RowSetIterator Clr_Wksht_Rule_View_Iter = Clr_Wksht_Rule_View.createRowSetIterator(null);
        while (Clr_Wksht_Rule_View_Iter.hasNext())
        {
            Row nextRow = Clr_Wksht_Rule_View_Iter.next();
            if (nextRow.getAttribute("RowStatus") != null) 
            {
                Integer rowStatus = (Integer) nextRow.getAttribute("RowStatus");
                if (rowStatus == 2)
                {
                   
                    revertChangesCurrentRow(nextRow);
                } 
                else if (rowStatus == 0) 
                {
                    
                    nextRow.remove();
                }
            }
        }
      this.executeQuery();
    }
}
