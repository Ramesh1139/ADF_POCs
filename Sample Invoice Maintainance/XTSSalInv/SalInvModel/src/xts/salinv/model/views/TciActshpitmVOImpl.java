package xts.salinv.model.views;

import java.math.BigDecimal;

import java.sql.Types;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.RowSetIterator;

import xts.common.model.framework.GenericEntityImpl;
import xts.common.model.framework.GenericViewObjectImpl;
import xts.common.model.framework.beans.DisabledLogicContainerModel;
import xts.common.model.framework.db.PLSQLCall;

import xts.salinv.model.services.XTSSalInvAMImpl;
import xts.salinv.model.views.common.TciActshpitmVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 07 12:26:47 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TciActshpitmVOImpl extends GenericViewObjectImpl implements TciActshpitmVO {

    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(TciActshpitmVOImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public TciActshpitmVOImpl() {
    }

    public void processDelShpitm() {
        TciActshpitmVORowImpl curRow = (TciActshpitmVORowImpl) this.getCurrentRow();
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        if (curRow != null) {
            try {
                PLSQLCall dc = new PLSQLCall("DP_SI.PL_DELETE_ACTSHPITM", this.getDBTransaction());
                dc.addIn(curRow.getCiaiDivcod());
                dc.addIn(curRow.getCiaiRunnum());
                dc.addIn(curRow.getCiaiSoRunnum());
                dc.addIn(curRow.getCiaiShiseq());
                dc.addIn(curRow.getCiaiItmseq());
                dc.execute();

                //NOT SURE WHY ONLY THIS VO HAS ERROR: Entity row with key oracle.jbo.Key[x x x x x ] is not found in TciDes.
                TciDesShpitmVORowImpl desRow = (TciDesShpitmVORowImpl) am.getTciDesShpitmVO().getCurrentRow();
                if (desRow != null) {
                    desRow.remove();
                }
                curRow.remove();
                updateLogicBeanCount("DEL"); //Enable/Disable master fields and details buttons based on ship item cnt
                am.getTciCusfldShpitmVO().cusfldShiExeQry();

            } catch (JboException e) {
                ((GenericEntityImpl) curRow.getEntityForAttribute("CiaiRunnum")).convertException(e);
            }
        }
    }

    public boolean addShipmentItems() {
        LOGGER.info("***addShipmentItems start");
        boolean isVoUpdated = false;
        boolean validationResult = true;
        JboException masterExc = new JboException("");
        String soLocked = null;

        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl mstRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
        Long cimsRunnum = mstRow.getCimsRunnum();
        RowSetIterator rsi = am.getSiSearchAddSosiVO().createRowSetIterator(null);
        RowSetIterator rsi2 = am.getSiSearchAddSosiVO().createRowSetIterator(null);

        SiSearchAddSosiVORowImpl row;
        int count = am.getSiSearchAddSosiVO().getRowCount();
        LOGGER.info("***count: " + count);
        while (count != 0) {
            count--;
            row = (SiSearchAddSosiVORowImpl) rsi.next();

            if (row.getisSelected() != null && row.getisSelected().equals(true)) {
                LOGGER.info("***addShipmentItems validation " + row.getSoNo() + ";" + row.getSosiShiseq() + ";" + row.getSosiItmseq());

                soLocked = plLockSo(row.getSosiRunnum(), masterExc);
                if (soLocked != null && (soLocked.equals("N") || soLocked.equals("E"))) {
                    validationResult = false;
                    break;
                }

                BigDecimal actQty = row.getActqty();
                BigDecimal balQty = row.getBalqty();
                if (actQty == null) {
                    JboException exc = new JboException(am.plGetMsgmst("5309"));
                    masterExc.addToExceptions(exc);
                    validationResult = false;
                    break;
                } else if (actQty != null && actQty.compareTo(BigDecimal.ZERO) < 1) { //act qty <= 0
                    JboException exc = new JboException(am.plGetMsgmst("1041"));
                    masterExc.addToExceptions(exc);
                    validationResult = false;
                    break;
                } else if (actQty.compareTo(balQty) > 0) {
                    JboException exc = new JboException(am.plGetMsgmst("1040"));
                    masterExc.addToExceptions(exc);
                    validationResult = false;
                    break;
                }

                PLSQLCall dc = new PLSQLCall("? := DP_SO.F_CHK_SO_RSV_POTENTIAL_PO", this.getDBTransaction());
                dc.addRet("ret", Types.INTEGER);
                dc.addIn(row.getSosiDivcod());
                dc.addIn(row.getSosiRunnum());
                dc.execute();
                Integer result = (Integer) dc.getObj("ret");

                if (result > 0) {
                    JboException exc = new JboException(am.plGetMsgmst("5665").replace("##F01##", row.getSoNo()));
                    masterExc.addToExceptions(exc);
                    validationResult = false;
                    break;
                }

            }
        }
        rsi.closeRowSetIterator();

        if (!validationResult) {
            throw masterExc;
        }

        count = am.getSiSearchAddSosiVO().getFetchedRowCount();
        if (validationResult) {
            while (count != 0) {
                count--;
                row = (SiSearchAddSosiVORowImpl) rsi2.next();
                if (row.getisSelected() != null && row.getisSelected().equals(true)) {
                    LOGGER.info("***addShipmentItems insert record " + row.getSoNo() + ";" + row.getSosiShiseq() + ";" + row.getSosiItmseq());
                    PLSQLCall dc;
                    dc = new PLSQLCall("DP_SI.PL_CREATE_TCI_ACTSHPITM", this.getDBTransaction());
                    dc.addIn(row.getSosiDivcod());
                    dc.addIn(cimsRunnum);
                    dc.addIn(row.getSosiRunnum());
                    dc.addIn(row.getSosiShiseq());
                    dc.addIn(row.getSosiItmseq());
                    dc.addIn(row.getActqty());
                    dc.execute();

                    dc = new PLSQLCall("DP_SI.PL_CREATE_TCI_ITMDES", this.getDBTransaction());
                    dc.addIn(row.getSosiDivcod());
                    dc.addIn(cimsRunnum);
                    dc.addIn(row.getSosiRunnum());
                    dc.addIn(row.getSosiShiseq());
                    dc.addIn(row.getSosiItmseq());
                    dc.execute();

                    dc = new PLSQLCall("DP_SI.PL_CREATE_TCI_ACTSHIAMT", this.getDBTransaction());
                    dc.addIn(row.getSosiDivcod());
                    dc.addIn(cimsRunnum);
                    dc.addIn(row.getSosiRunnum());
                    dc.addIn(row.getSosiShiseq());
                    dc.addIn(row.getSosiItmseq());
                    dc.execute();

                    //ADDITIONAL AMOUNT TEMPLATE LOGIC
                    SiSearchAddSosiExtraVOImpl paramVo = am.getSiSearchAddSosiExtraVO();
                    SiSearchAddSosiExtraVORowImpl paramRow = (SiSearchAddSosiExtraVORowImpl) paramVo.getCurrentRow();
                    if (paramRow != null) {
                        LOGGER.info("Default Additional Amount Template: " + paramRow.getDefAddamtTpl());
                        if (paramRow.getDefAddamtTpl() != null && paramRow.getDefAddamtTpl().equalsIgnoreCase("Y")) {
                            dc = new PLSQLCall("? := DP_ADDAMT_TPL.PL_ADDAMT_TPLDEF_CHK_ITM", this.getDBTransaction());
                            dc.addRet("ret", Types.VARCHAR);
                            dc.addIn(mstRow.getCimsDivcod());
                            dc.addIn(mstRow.getCimsCuscod());
                            dc.addIn(mstRow.getCimsDptcod());
                            dc.addIn(cimsRunnum);
                            dc.addIn("SI");
                            dc.addIn(row.getSosiItmseq());
                            dc.addIn(row.getSosiRunnum());
                            dc.addIn(row.getSosiShiseq());
                            dc.addIn(null);
                            dc.execute();
                            Object ret = dc.getObj("ret");
                            LOGGER.info("DP_ADDAMT_TPL.PL_ADDAMT_TPLDEF_CHK_ITM: " + (String) ret);
                            if (ret != null) {
                                dc = new PLSQLCall("? := DP_ADDAMT_TPL.PL_ADDAMT_TPLDEF", this.getDBTransaction());
                                dc.addRet("ret", Types.VARCHAR);
                                dc.addIn(mstRow.getCimsDivcod());
                                dc.addIn(mstRow.getCimsCuscod());
                                dc.addIn(mstRow.getCimsDptcod());
                                dc.addIn(cimsRunnum);
                                dc.addIn("SI");
                                dc.addIn(9);
                                dc.addIn(row.getSosiItmseq());
                                dc.addIn(row.getSosiRunnum());
                                dc.addIn(row.getSosiShiseq());
                                dc.addIn(null);
                                dc.execute();
                                ret = dc.getObj("ret");
                            }
                        }
                    }
                    updateLogicBeanCount("ADD");
                    isVoUpdated = true;
                    row.setisSelected(false);
                }
            }
        }
        rsi2.closeRowSetIterator();

        this.executeQuery();

        boolean dirtyFlag = am.getDirtyFlag();
        if (isVoUpdated && !dirtyFlag) {
            am.setDirtyFlag(true);
        }
        return isVoUpdated;
    }

    private String plLockSo(Long soRunnum, JboException ex) {

        PLSQLCall dc;
        String locked = null;
        String errMsg = null;

        try {
            dc = new PLSQLCall("DP_SO.PL_LOCK_SO", this.getDBTransaction());
            dc.addIn(soRunnum);
            dc.addOut("locked", Types.VARCHAR);
            dc.addOut("errMsg", Types.VARCHAR);
            dc.execute();

            locked = (String) dc.getObj("locked");
            errMsg = (String) dc.getObj("errMsg");

            if (locked.equalsIgnoreCase("N") || locked.equalsIgnoreCase("E"))
                ex.addToExceptions(new JboException(errMsg));

        } catch (JboException e) {
            locked = "E";
            ex.addToExceptions(e);
        }

        return locked;
    }

    public void updateLogicBeanCount(String action) {
        if (ADFContext.getCurrent().isJEE()) {

            XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
            TciMstVORowImpl mstRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
            if (mstRow != null) {
                DisabledLogicContainerModel disabledControlModel = (DisabledLogicContainerModel) ADFContext.getCurrent()
                                                                                                           .getPageFlowScope()
                                                                                                           .get("XTSDisabledLogicContainerBean");

                String key = key = "TCI_MST:" + mstRow.getCimsDivcod() + "|" + mstRow.getCimsRunnum();
                int shpItmCnt = (Integer) disabledControlModel.getData(key, "SHPITM_COUNT");
                if (action.equals("ADD")) {
                    shpItmCnt++;
                } else {
                    shpItmCnt--;
                }
                disabledControlModel.addData(key, "SHPITM_COUNT", shpItmCnt);
            }
        }
    }
}

