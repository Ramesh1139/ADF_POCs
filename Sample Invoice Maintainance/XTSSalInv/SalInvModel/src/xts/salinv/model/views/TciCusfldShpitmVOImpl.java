package xts.salinv.model.views;

import java.sql.Types;

import java.text.ParseException;

import java.util.Objects;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.RowSetIterator;

import xts.common.model.framework.GenericEntityImpl;
import xts.common.model.framework.GenericViewObjectImpl;
import xts.common.model.framework.db.PLSQLCall;

import xts.salinv.model.services.XTSSalInvAMImpl;
import xts.salinv.model.views.common.TciCusfldShpitmVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 30 15:42:00 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TciCusfldShpitmVOImpl extends GenericViewObjectImpl implements TciCusfldShpitmVO {

    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(TciCusfldShpitmVOImpl.class);

    final String validateFunction = "DP_SI.PL_VALIDATE_TCI_CUSFLD";
    final String updateFunction = "DP_SI.PL_UPDATE_CUSFLD";
    final String module = "C01I";

    /**
     * This is the default constructor (do not remove).
     */
    public TciCusfldShpitmVOImpl() {
    }

    //
    // Methods
    //
    public void shiValidateUpdate() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String editMode = (String) am.getUserDataEntry("custom_ACCESS_MODE");
        if (editMode != null && editMode.equalsIgnoreCase("edit")) {
            this.plValidateCusfldShi("ONE");
            this.plUpdateCusfldShi();
            this.cusfldShiExeQry();
        }
    }

    public void shiSelectionChkCusfld() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String editMode = (String) am.getUserDataEntry("custom_ACCESS_MODE");
        if (editMode != null && editMode.equalsIgnoreCase("edit")) {
            this.plValidateCusfldShi("ONE");
            this.plUpdateCusfldShi();
            am.postChanges();
        }
        this.cusfldShiExeQry();
    }

    public void cusfldShiExeQry() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl mstRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
        TciActshpitmVORowImpl shiRow = (TciActshpitmVORowImpl) am.getTciActshpitmVO().getCurrentRow();

        if (mstRow != null && shiRow != null) {
            PLSQLCall dc = new PLSQLCall("? := DP_SI.F_CHECK_TEMPLATE", this.getDBTransaction());
            dc.addRet("ret", Types.INTEGER);
            dc.addIn(mstRow.getCimsDivcod());
            dc.addIn(module);
            dc.addIn(mstRow.getCimsCuscod());
            dc.execute();
            Integer count = (Integer) dc.getObj("ret");

            String cus;
            if (count.equals(0)) {
                cus = "*";
            } else {
                cus = mstRow.getCimsCuscod();
            }

            this.setdivcodVar(mstRow.getCimsDivcod());
            this.setcuscodVar(mstRow.getCimsCuscod());
            this.setrunnumVar(mstRow.getCimsRunnum());
            this.setitmseqVar(shiRow.getCiaiItmseq());
            this.setshiseqVar(shiRow.getCiaiShiseq());
            this.setsorunnumVar(shiRow.getCiaiSoRunnum());
            this.executeQuery();
        }
    }

    public void plValidateCusfldShi(String validateOption) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        RowSetIterator rsi = this.createRowSetIterator(null);

        String divcod = this.getdivcodVar();
        Long runnum = this.getrunnumVar();
        Long soRunnum = this.getsorunnumVar();
        Integer shiseq = this.getshiseqVar();
        Integer itmseq = this.getitmseqVar();
        String stscod = "AT";

        TciCusfldShpitmVORowImpl row;
        String anonymousBlock = "";
        int count = 0;

        while (rsi.hasNext()) {
            row = (TciCusfldShpitmVORowImpl) rsi.next();
            //For testing
            count++;

            if (!Objects.equals(row.getFldDbVal(), row.getFldEditVal())) {
                String fldEditVal = row.getFldEditVal();
                if (fldEditVal != null) {
                    fldEditVal = "'" + fldEditVal + "'";
                }

                anonymousBlock = "declare \n  rt TCI_CUSFLD%ROWTYPE; \nbegin \n";

                anonymousBlock = anonymousBlock + "  rt." + "CICF_DIVCOD" + " := '" + divcod + "'; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_RUNNUM" + " := " + runnum + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_SO_RUNNUM" + " := " + soRunnum + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_SHISEQ" + " := " + shiseq + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_ITMSEQ" + " := " + itmseq + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_FLD_ID" + " := " + row.getFieldId() + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_VAL" + " := " + fldEditVal + "; \n";

                anonymousBlock = anonymousBlock + "  " + validateFunction + " ('" + module + "',rt,'" + stscod + "','" + validateOption + "'); \n" + "end;";

                LOGGER.info(anonymousBlock);

                PLSQLCall dc = new PLSQLCall(anonymousBlock, validateFunction, this.getDBTransaction());
                try {
                    dc.executeRaw();
                } catch (JboException err) {
                    ((GenericEntityImpl) ((TciMstVORowImpl) am.getTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(err);
                }
            }
        }

        rsi.closeRowSetIterator();
        LOGGER.info("Row count: " + count);
    }

    public void plUpdateCusfldShi() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        Boolean dirtyFlag = am.getDirtyFlag();
        RowSetIterator rsi = this.createRowSetIterator(null);
        TciCusfldShpitmVORowImpl row;
        String anonymousBlock = "";
        String action = "";
        String divcod = this.getdivcodVar();
        Long runnum = this.getrunnumVar();
        Long soRunnum = this.getsorunnumVar();
        Integer shiseq = this.getshiseqVar();
        Integer itmseq = this.getitmseqVar();
        String fldEditVal;

        while (rsi.hasNext()) {
            row = (TciCusfldShpitmVORowImpl) rsi.next();
            action = "";
            fldEditVal = row.getFldEditVal();

            if (fldEditVal != null) {
                if (row.getDataType().equalsIgnoreCase("D")) {
                    try {
                        fldEditVal = am.formatDate(fldEditVal);
                    } catch (ParseException e) {
                        throw new JboException("Invalid Date: " + fldEditVal);
                    }
                }
            }

            if ((row.getFldEditVal() != null) && (row.getFldDbVal() == null)) {
                //insert
                action = "I";
            } else if ((row.getFldEditVal() == null) && (row.getFldDbVal() != null)) {
                //delete
                action = "D";
            } else if ((row.getFldEditVal() != null) && (row.getFldDbVal() != null)) {
                //update
                if (!row.getFldEditVal().equalsIgnoreCase(row.getFldDbVal())) {
                    action = "U";
                }
            }

            if (action != null && !action.isEmpty()) {

                if (!dirtyFlag) {
                    am.setDirtyFlag(true);
                }

                if (fldEditVal != null) {
                    fldEditVal = "'" + fldEditVal + "'";
                }

                anonymousBlock = "declare \n  rt TCI_CUSFLD%ROWTYPE; \nbegin \n";

                anonymousBlock = anonymousBlock + "  rt." + "CICF_DIVCOD" + " := '" + divcod + "'; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_RUNNUM" + " := " + runnum + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_SO_RUNNUM" + " := " + soRunnum + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_SHISEQ" + " := " + shiseq + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_ITMSEQ" + " := " + itmseq + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_FLD_ID" + " := " + row.getFieldId() + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_VAL" + " := " + fldEditVal + "; \n";

                anonymousBlock = anonymousBlock + "  " + updateFunction + " (rt,'" + action + "'); \n" + "end;";

                LOGGER.info(anonymousBlock);
                PLSQLCall dc = new PLSQLCall(anonymousBlock, updateFunction, this.getDBTransaction());
                try {
                    dc.executeRaw();
                } catch (JboException err) {
                    ((GenericEntityImpl) ((TciMstVORowImpl) am.getTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(err);
                }
            } else {
                LOGGER.info("NO ACTION. " + divcod + ";" + runnum + ";" + soRunnum + ";" + shiseq + ";" + itmseq + ";" + row.getFieldId() + ";" +
                            row.getFldEditVal() + ";" + row.getFldDbVal());
            }
        }

        rsi.closeRowSetIterator();
    }

    public String shiChkForMstLst() {
        TciCusfldShpitmVORowImpl curRow = (TciCusfldShpitmVORowImpl) this.getCurrentRow();
        if (curRow != null)
            return curRow.getIsMsttab();
        return "N";
    }

    /**
     * Returns the bind variable value for divcodVar.
     * @return bind variable value for divcodVar
     */
    public String getdivcodVar() {
        return (String) getNamedWhereClauseParam("divcodVar");
    }

    /**
     * Sets <code>value</code> for bind variable divcodVar.
     * @param value value to bind as divcodVar
     */
    public void setdivcodVar(String value) {
        setNamedWhereClauseParam("divcodVar", value);
    }

    /**
     * Returns the bind variable value for cuscodVar.
     * @return bind variable value for cuscodVar
     */
    public String getcuscodVar() {
        return (String) getNamedWhereClauseParam("cuscodVar");
    }

    /**
     * Sets <code>value</code> for bind variable cuscodVar.
     * @param value value to bind as cuscodVar
     */
    public void setcuscodVar(String value) {
        setNamedWhereClauseParam("cuscodVar", value);
    }

    /**
     * Returns the bind variable value for runnumVar.
     * @return bind variable value for runnumVar
     */
    public Long getrunnumVar() {
        return (Long) getNamedWhereClauseParam("runnumVar");
    }

    /**
     * Sets <code>value</code> for bind variable runnumVar.
     * @param value value to bind as runnumVar
     */
    public void setrunnumVar(Long value) {
        setNamedWhereClauseParam("runnumVar", value);
    }

    /**
     * Returns the bind variable value for itmseqVar.
     * @return bind variable value for itmseqVar
     */
    public Integer getitmseqVar() {
        return (Integer) getNamedWhereClauseParam("itmseqVar");
    }

    /**
     * Sets <code>value</code> for bind variable itmseqVar.
     * @param value value to bind as itmseqVar
     */
    public void setitmseqVar(Integer value) {
        setNamedWhereClauseParam("itmseqVar", value);
    }

    /**
     * Returns the bind variable value for sorunnumVar.
     * @return bind variable value for sorunnumVar
     */
    public Long getsorunnumVar() {
        return (Long) getNamedWhereClauseParam("sorunnumVar");
    }

    /**
     * Sets <code>value</code> for bind variable sorunnumVar.
     * @param value value to bind as sorunnumVar
     */
    public void setsorunnumVar(Long value) {
        setNamedWhereClauseParam("sorunnumVar", value);
    }

    /**
     * Returns the bind variable value for shiseqVar.
     * @return bind variable value for shiseqVar
     */
    public Integer getshiseqVar() {
        return (Integer) getNamedWhereClauseParam("shiseqVar");
    }

    /**
     * Sets <code>value</code> for bind variable shiseqVar.
     * @param value value to bind as shiseqVar
     */
    public void setshiseqVar(Integer value) {
        setNamedWhereClauseParam("shiseqVar", value);
    }
}

