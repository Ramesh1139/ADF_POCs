package xts.salinv.model.views;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;

import xts.common.model.framework.GenericViewObjectImpl;

import xts.salinv.model.services.XTSSalInvAMImpl;
import xts.salinv.model.views.common.LoadTemplateVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 23 15:50:53 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LoadTemplateVOImpl extends GenericViewObjectImpl implements LoadTemplateVO {

    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(LoadTemplateVOImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public LoadTemplateVOImpl() {
    }

    public void proecssLoadTemplate(String loc) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        LoadTplInputVORowImpl input = (LoadTplInputVORowImpl) am.getLoadTplInputVO().getCurrentRow();
        String divcod = input.getDivcod();
        String tplCod = input.getTplcod();
        LOGGER.info("**Process Template - Divcod: " + divcod + " Tplcod: " + tplCod + " Location: " + loc);
        ViewCriteria vc = this.getViewCriteria("LoadTemplateVOCriteria");
        this.setdivcodTplVar(divcod);
        this.settplcodVar(tplCod);
        this.applyViewCriteria(vc);
        this.executeQuery();

        RowSetIterator rsi = this.createRowSetIterator(null);
        int count = 0;
        while (rsi.hasNext()) {
            LoadTemplateVORowImpl row = (LoadTemplateVORowImpl) rsi.next();

            if (row != null) {
                count++;
                if (loc.equalsIgnoreCase("HDR")) {
                    TciAddAmtVORowImpl mstAddAmtRow = (TciAddAmtVORowImpl) am.getTciAddAmtVO().createRow();
                    mstAddAmtRow.setCiaaChrtyp(row.getMpaddChrtyp());
                    mstAddAmtRow.setCiaaDes(row.getMpaddDes());
                    if (!(row.getMpaddAmt() == null && row.getMpaddRat() == null)) {
                        if (row.getMpaddAmt() == null) {
                            if (row.getMpaddRat().compareTo(BigDecimal.ZERO) > 0 || row.getMpaddRat().compareTo(BigDecimal.ZERO) < 0) {
                                mstAddAmtRow.setCiaaRat(row.getMpaddRat());
                            }
                        } else if (row.getMpaddRat() == null) {
                            if (row.getMpaddAmt().compareTo(BigDecimal.ZERO) > 0 || row.getMpaddAmt().compareTo(BigDecimal.ZERO) < 0) {
                                mstAddAmtRow.setCiaaAmt(row.getMpaddAmt());
                            }
                        }
                    }
                    am.getTciAddAmtVO().insertRow(mstAddAmtRow);
                } else {
                    TciActshiamtVORowImpl addAmtrow = (TciActshiamtVORowImpl) am.getTciActshiamtVO().createRow();
                    addAmtrow.setCisaChrtyp(row.getMpaddChrtyp());
                    addAmtrow.setCisaDes(row.getMpaddDes());
                    if (!(row.getMpaddAmt() == null && row.getMpaddRat() == null && row.getMpaddItmamt() == null)) {
                        if (row.getMpaddRat() == null && row.getMpaddItmamt() == null) {
                            if (row.getMpaddAmt().compareTo(BigDecimal.ZERO) > 0 || row.getMpaddAmt().compareTo(BigDecimal.ZERO) < 0) {
                                addAmtrow.setCisaAmt(row.getMpaddAmt());
                            }
                        } else if (row.getMpaddAmt() == null && row.getMpaddRat() != null) {
                            if (row.getMpaddRat().compareTo(BigDecimal.ZERO) > 0 || row.getMpaddRat().compareTo(BigDecimal.ZERO) < 0) {
                                addAmtrow.setCisaRat(row.getMpaddRat());
                            }
                        } else if (row.getMpaddAmt() == null && row.getMpaddItmamt() != null) {
                            if (row.getMpaddItmamt().compareTo(BigDecimal.ZERO) > 0 || row.getMpaddItmamt().compareTo(BigDecimal.ZERO) < 0) {
                                addAmtrow.setCisaItmamt(row.getMpaddItmamt());
                            }
                        }
                    }
                    addAmtrow.setCisaInvshw(row.getMpaddSiShw());
                    am.getTciActshiamtVO().insertRow(addAmtrow);
                }
            }
        }
        rsi.reset();
        rsi.closeRowSetIterator();

    }

    /**
     * Returns the variable value for divcodTplVar.
     * @return variable value for divcodTplVar
     */
    public String getdivcodTplVar() {
        return (String) ensureVariableManager().getVariableValue("divcodTplVar");
    }

    /**
     * Sets <code>value</code> for variable divcodTplVar.
     * @param value value to bind as divcodTplVar
     */
    public void setdivcodTplVar(String value) {
        ensureVariableManager().setVariableValue("divcodTplVar", value);
    }

    /**
     * Returns the variable value for tplcodVar.
     * @return variable value for tplcodVar
     */
    public String gettplcodVar() {
        return (String) ensureVariableManager().getVariableValue("tplcodVar");
    }

    /**
     * Sets <code>value</code> for variable tplcodVar.
     * @param value value to bind as tplcodVar
     */
    public void settplcodVar(String value) {
        ensureVariableManager().setVariableValue("tplcodVar", value);
    }
}

