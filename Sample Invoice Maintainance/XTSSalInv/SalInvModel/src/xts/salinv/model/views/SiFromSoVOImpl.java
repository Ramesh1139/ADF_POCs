package xts.salinv.model.views;

import java.math.BigDecimal;

import java.sql.ResultSet;
import java.sql.Types;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaHints;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.domain.Date;

import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.ViewRowImpl;

import xts.common.model.framework.GenericEntityImpl;
import xts.common.model.framework.GenericViewObjectImpl;
import xts.common.model.framework.db.PLSQLCall;

import xts.salinv.model.services.XTSSalInvAMImpl;
import xts.salinv.model.views.common.SiFromSoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 14 13:24:51 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SiFromSoVOImpl extends GenericViewObjectImpl implements SiFromSoVO {

    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(SiFromSoVOImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public SiFromSoVOImpl() {
    }

    @Override
    public String getCriteriaItemClause(ViewCriteriaItem viewCriteriaItem) {
        Object bindVariableValue = viewCriteriaItem.getValueFromVariableManager(this.getVariableManager());

        if (bindVariableValue == null && viewCriteriaItem.getOperator().equals("DP_SHP_PLN.F_CHECK_SHP_PLN")) {
            return " DP_SHP_PLN.F_CHECK_SHP_PLN(SOSI_DIVCOD, null, SOSI_RUNNUM, SOSI_SHISEQ, SOSI_ITMSEQ) = 'Y' ";
        }

        return super.getCriteriaItemClause(viewCriteriaItem);
    }

    @Override
    public void executeQuery() {

        if (this.getshpnmNoVar() != null) {
            LOGGER.info("Search with Shipment Plan No. : " + this.getshpnmNoVar() + "\nRemoved the following criteria: " + this.getpoNumVar() + ";" +
                        this.getsoNoVar() + ";" + this.getschdatFromVar() + ";" + this.getschdatToVar());
            this.setpoNumVar(null);
            this.setsoNoVar(null);
            this.setschdatFromVar(null);
            this.setschdatToVar(null);
        }

        if (this.getsoNoVar() == null) {
            if (this.getsomsRunnumVar() != null)
                this.setsomsRunnumVar(null);
        }

        super.executeQuery();
    }

    @Override
    public ViewRowImpl createInstanceFromResultSet(QueryCollection queryCollection, ResultSet resultSet) {
        ViewRowImpl vr = super.createInstanceFromResultSet(queryCollection, resultSet);

        if (vr instanceof SiFromSoVORowImpl) {
            SiFromSoVORowImpl row = (SiFromSoVORowImpl) vr;
            row.setisSelected(true);
        }
        return vr;
    }

    public void selectAllRows() {
        if (this.getViewDef().getAttributeIndexOf("isSelected") != -1) {
            RowSetIterator rsi = this.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row row = rsi.next();
                row.setAttribute("isSelected", true);
            }
            rsi.closeRowSetIterator();
        }
    }

    public void unselectAllRows() {
        if (this.getViewDef().getAttributeIndexOf("isSelected") != -1) {
            RowSetIterator rsi = this.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row row = rsi.next();
                row.setAttribute("isSelected", false);
            }
            rsi.closeRowSetIterator();
        }
    }

    public void siFromSoSetBindVar(String divcod, Long somsRunnum) {
        this.setdivcodVar(divcod);
        this.setsomsRunnumVar(somsRunnum);

        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVORowImpl extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().getCurrentRow();
        Boolean newRow = false;
        ViewCriteria vc = this.getViewCriteria("SiFromSoVOCriteria");
        if (extraParams == null) {
            extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().createRow();
            newRow = true;
        }

        if (somsRunnum != null) {
            LOGGER.info("***siFromSoSetBindVar divcod: " + divcod + " somsRunnum: " + somsRunnum);
            TsoMstVOImpl soView = am.getTsoMstVO();
            soView.setWhereClause(" SOMS_STSCOD = 'CO' AND SOMS_DIVCOD = '" + divcod + "' AND SOMS_RUNNUM = " + somsRunnum);
            soView.executeQuery();

            LOGGER.info("***siFromSoSetBindVar getEstimatedRowCount: " + soView.getEstimatedRowCount());
            while (soView.hasNext()) {
                TsoMstVORowImpl soRow = (TsoMstVORowImpl) soView.next();

                if (soRow != null) {
                    LOGGER.info("***siFromSoSetBindVar soRow!=null cuscod: " + soRow.getSomsCuscod() + " dptcod: " + soRow.getSomsDptcod() + " curcod: " +
                                soRow.getSomsCurcod());
                    this.setcuscodVar(soRow.getSomsCuscod());
                    this.setdptcodVar(soRow.getSomsDptcod());
                    this.setcurcodVar(soRow.getSomsCurcod());
                    this.setsoNoVar(soRow.getSomsDocnbr());
                    extraParams.setRefSo(soRow.getSomsDocnbr());

                    if (newRow) {
                        am.getSiFromSoExtraVO().insertRow(extraParams);
                    }

                    vc.setProperty(ViewCriteriaHints.CRITERIA_AUTO_EXECUTE, true);
                    vc.saveState();
                }
            }
        } else {
            vc.setProperty(ViewCriteriaHints.CRITERIA_AUTO_EXECUTE, false);
            vc.saveState();
        }
    }

    //F_VALIDATE_BLK4_SI_FRM_SO_ADD
    public String fValidateSiFrmSo() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVOImpl extraParam = am.getSiFromSoExtraVO();
        SiFromSoExtraVORowImpl extraP = (SiFromSoExtraVORowImpl) extraParam.getCurrentRow();
        extraParam.validateSiFromSoExtra();

        String unique = flCheckSiFrmSoUniqval();
        if (unique.equals("N") && !extraP.getShortlistUniqPaytrm()) {
            plClrDefaultPaytrm();
            return "N";
        } else {
            if (unique.equals("Y"))
                plShortlistUniqTerms();
            else
                plClrDefaultPaytrm();
        }

        validateSiFromSo();
        return "Y";
    }

    public void insertSiFromSo(String divcod) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVORowImpl extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().getCurrentRow();
        if (ADFContext.getCurrent().isJEE()) {
            try {
                if (extraParams != null) {
                    //Validate Shipment Item level
                    validateSiFromSo();

                    PLSQLCall dc = new PLSQLCall("DP_SI.PL_CREATE_TCI_MST", this.getDBTransaction());
                    dc.addIn(divcod); //divcod = #{pageFlowScope.divisionParam}
                    dc.addIn(this.getdptcodVar());
                    dc.addIn(extraParams.getCimsYear());
                    dc.addIn(this.getcuscodVar());
                    dc.addIn(extraParams.getRefSo());
                    dc.addOut("ret", Types.DOUBLE);
                    dc.execute();
                    Object ret = dc.getObj("ret");
                    Long runNumber = ((Number) ret).longValue();
                    
                    updateDefaultValuesFromSo(divcod,runNumber);

                    //add shipment items
                    int estimatedRangePageCount = this.getEstimatedRangePageCount();
                    LOGGER.info("start add shipment items estimatedRangePageCount: " + estimatedRangePageCount);
                    for (int i = 0; i < estimatedRangePageCount; i++) {
                        this.scrollToRangePage(i + 1);
                        Row[] rows = this.getAllRowsInRange();
                        for (Row row : rows) {
                            SiFromSoVORowImpl siFromSoRow = (SiFromSoVORowImpl) row;
                            LOGGER.info("*** " + siFromSoRow.getSoNo() + ";" + siFromSoRow.getSosiShiseq() + ";" + siFromSoRow.getSosiItmseq() + " selected: " +
                                        siFromSoRow.getisSelected());
                            if (siFromSoRow.getisSelected() != null && siFromSoRow.getisSelected()) {
                                LOGGER.info("processing " + siFromSoRow.getSoNo() + ";" + siFromSoRow.getSosiShiseq() + ";" + siFromSoRow.getSosiItmseq());
                                dc = new PLSQLCall("DP_SI.PL_CREATE_TCI_ACTSHPITM", this.getDBTransaction());
                                dc.addIn(divcod);
                                dc.addIn(runNumber);
                                dc.addIn(siFromSoRow.getSosiRunnum());
                                dc.addIn(siFromSoRow.getSosiShiseq());
                                dc.addIn(siFromSoRow.getSosiItmseq());
                                dc.addIn(siFromSoRow.getActqty());
                                dc.execute();

                                dc = new PLSQLCall("DP_SI.PL_CREATE_TCI_ITMDES", this.getDBTransaction());
                                dc.addIn(divcod);
                                dc.addIn(runNumber);
                                dc.addIn(siFromSoRow.getSosiRunnum());
                                dc.addIn(siFromSoRow.getSosiShiseq());
                                dc.addIn(siFromSoRow.getSosiItmseq());
                                dc.execute();

                                dc = new PLSQLCall("DP_SI.PL_CREATE_TCI_ACTSHIAMT", this.getDBTransaction());
                                dc.addIn(divcod);
                                dc.addIn(runNumber);
                                dc.addIn(siFromSoRow.getSosiRunnum());
                                dc.addIn(siFromSoRow.getSosiShiseq());
                                dc.addIn(siFromSoRow.getSosiItmseq());
                                dc.execute();

                                //DEFAULT ADDITIONAL AMOUNT TEMPLATE
                                if (extraParams.getDefAddamtTpl()) {
                                    dc = new PLSQLCall("? := DP_ADDAMT_TPL.PL_ADDAMT_TPLDEF_CHK_ITM", this.getDBTransaction());
                                    dc.addRet("ret", Types.VARCHAR);
                                    dc.addIn(divcod);
                                    dc.addIn(this.getcuscodVar());
                                    dc.addIn(this.getdptcodVar());
                                    dc.addIn(runNumber);
                                    dc.addIn("SI");
                                    dc.addIn(siFromSoRow.getSosiItmseq());
                                    dc.addIn(siFromSoRow.getSosiRunnum());
                                    dc.addIn(siFromSoRow.getSosiShiseq());
                                    dc.addIn(null);
                                    dc.execute();
                                    ret = dc.getObj("ret");

                                    if (ret != null) {
                                        dc = new PLSQLCall("? := DP_ADDAMT_TPL.PL_ADDAMT_TPLDEF", this.getDBTransaction());
                                        dc.addRet("ret", Types.VARCHAR);
                                        dc.addIn(divcod);
                                        dc.addIn(this.getcuscodVar());
                                        dc.addIn(this.getdptcodVar());
                                        dc.addIn(runNumber);
                                        dc.addIn("SI");
                                        dc.addIn(9);
                                        dc.addIn(siFromSoRow.getSosiItmseq());
                                        dc.addIn(siFromSoRow.getSosiRunnum());
                                        dc.addIn(siFromSoRow.getSosiShiseq());
                                        dc.addIn(null);
                                        dc.execute();
                                        ret = dc.getObj("ret");
                                    }
                                }

                                //Reset checkbox after finishing operations
                                siFromSoRow.setisSelected(false);
                            }
                        }
                    }

                    ViewCriteria vc = am.getTciMstVO().getViewCriteria("InsertTciMstVOCriteria");
                    am.getTciMstVO().setcimsDivcodVar(divcod);
                    am.getTciMstVO().setcimsRunnumVar(runNumber);
                    am.getTciMstVO().applyViewCriteria(vc);
                    am.getTciMstVO().executeQuery();

                    TciMstVORowImpl newlySavedRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
                    if (newlySavedRow != null) {
                        newlySavedRow.setCimsRunnum(runNumber);
                        newlySavedRow.xtsLock();
                    }

                    am.setUserDataEntry("EDIT_MODE", "A"); //For Validate Whole SI
                }

            } catch (JboException e) {
                ((GenericEntityImpl) ((TciMstVORowImpl) am.getInsertTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(e);
            }
        }
    }

    public void updateDefaultValuesFromSo(String divcod, Long runnum) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVORowImpl extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().getCurrentRow();
        
        if (extraParams != null) {
            PLSQLCall dc = new PLSQLCall("DP_SI.PL_UPDATE_SO_DEFVAL", this.getDBTransaction());
            dc.addIn(divcod);
            dc.addIn(runnum);
            dc.addIn(extraParams.getCimsShpdat());
            dc.addIn(extraParams.getCimsInvdat());
            dc.addIn(extraParams.getSomsPaytrmcodToSi());
            dc.addIn(extraParams.getSomsPaytrmdesToSi());
            dc.addIn(extraParams.getSomsBildatRefToSi());
            dc.execute();
        }

    }

    public void validateSiFromSo() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        boolean validationResult = true;
        JboException masterExc = new JboException("");
        int estimatedRangePageCount = this.getEstimatedRangePageCount();
        for (int i = 0; i < estimatedRangePageCount; i++) {
            this.scrollToRangePage(i + 1);
            Row[] rows = this.getAllRowsInRange();
            for (Row row : rows) {
                SiFromSoVORowImpl siFromSoRow = (SiFromSoVORowImpl) row;
                if (siFromSoRow.getisSelected() != null && siFromSoRow.getisSelected()) {
                    BigDecimal actQty = siFromSoRow.getActqty();
                    BigDecimal balQty = siFromSoRow.getBalqty();
                    if (actQty == null) {
                        JboException exc = new JboException(am.plGetMsgmst("5309"));
                        masterExc.addToExceptions(exc);
                        validationResult = false;
                        break;
                    } else if (actQty != null && actQty.compareTo(BigDecimal.ZERO) < 1) { //act qty <= 0
                        JboException exc = new JboException(am.plGetMsgmst("1041"));
                        masterExc.addToExceptions(exc);
                        validationResult = false;
                        break;
                    } else if (actQty.compareTo(balQty) > 0) {
                        JboException exc = new JboException(am.plGetMsgmst("1040"));
                        masterExc.addToExceptions(exc);
                        validationResult = false;
                        break;
                    }

                    PLSQLCall dc = new PLSQLCall("? := DP_SO.F_CHK_SO_RSV_POTENTIAL_PO", this.getDBTransaction());
                    dc.addRet("ret", Types.INTEGER);
                    dc.addIn(siFromSoRow.getSosiDivcod());
                    dc.addIn(siFromSoRow.getSosiRunnum());
                    dc.execute();
                    Integer result = (Integer) dc.getObj("ret");

                    if (result > 0) {
                        JboException exc = new JboException(am.plGetMsgmst("5665").replace("##F01##", siFromSoRow.getSoNo()));
                        masterExc.addToExceptions(exc);
                        validationResult = false;
                        break;
                    }

                }
            }
        }
        if (!validationResult) {
            throw masterExc;
        }
    }

    public String flCheckSiFrmSoUniqval() {
        String isFirst = "Y";
        String prevCaseRec = "~", curCaseRec;
        RowSetIterator rsi = this.createRowSetIterator(null);
        int count = this.getFetchedRowCount();
        while (count != 0) {
            count--;
            SiFromSoVORowImpl row = (SiFromSoVORowImpl) rsi.next();
            if (row.getisSelected() != null && row.getisSelected()) {
                if (isFirst.equals("Y")) {
                    prevCaseRec = row.getSoRec();
                    isFirst = "N";
                }
                curCaseRec = row.getSoRec();
                if (!curCaseRec.equalsIgnoreCase(prevCaseRec))
                    return "N";
                else
                    prevCaseRec = curCaseRec;
            }
        }
        rsi.closeRowSetIterator();
        return "Y";
    }

    public void plShortlistUniqTerms() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVORowImpl extraParamRow = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().getCurrentRow();
        if (extraParamRow != null) {
            RowSetIterator rsi = this.createRowSetIterator(null);
            int count = this.getFetchedRowCount();
            String isFirst = "Y";
            while (count != 0) {
                count--;
                SiFromSoVORowImpl row = (SiFromSoVORowImpl) rsi.next();
                if (row.getisSelected() != null && row.getisSelected() && row.getSoNo() != null) {
                    if (isFirst.equals("Y")) {
                        extraParamRow.setSomsPaytrmcodToSi(row.getSomsPaytrmcod());
                        extraParamRow.setSomsPaytrmdesToSi(row.getSomsPaytrmdes());
                        extraParamRow.setSomsBildatRefToSi(row.getSomsBildatRef());
                        isFirst = "N";
                    }
                }
            }
            rsi.closeRowSetIterator();
        }
    }

    public void plClrDefaultPaytrm() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVORowImpl extraParamRow = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().getCurrentRow();
        if (extraParamRow != null) {
            extraParamRow.setSomsPaytrmcodToSi(null);
            extraParamRow.setSomsPaytrmdesToSi(null);
            extraParamRow.setSomsBildatRefToSi(null);
        }
    }

    /**
     * Returns the bind variable value for divcodVar.
     * @return bind variable value for divcodVar
     */
    public String getdivcodVar() {
        return (String) getNamedWhereClauseParam("divcodVar");
    }

    /**
     * Sets <code>value</code> for bind variable divcodVar.
     * @param value value to bind as divcodVar
     */
    public void setdivcodVar(String value) {
        setNamedWhereClauseParam("divcodVar", value);

        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVORowImpl extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().getCurrentRow();
        Boolean newRow = false;
        if (extraParams == null) {
            extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().createRow();
            newRow = true;
        }
        extraParams.setDivcod(value);
        if (newRow) {
            am.getSiFromSoExtraVO().insertRow(extraParams);
        }
    }

    /**
     * Returns the bind variable value for somsRunnumVar.
     * @return bind variable value for somsRunnumVar
     */
    public Long getsomsRunnumVar() {
        return (Long) getNamedWhereClauseParam("somsRunnumVar");
    }

    /**
     * Sets <code>value</code> for bind variable somsRunnumVar.
     * @param value value to bind as somsRunnumVar
     */
    public void setsomsRunnumVar(Long value) {
        setNamedWhereClauseParam("somsRunnumVar", value);
    }

    /**
     * Returns the variable value for cuscodVar.
     * @return variable value for cuscodVar
     */
    public String getcuscodVar() {
        return (String) ensureVariableManager().getVariableValue("cuscodVar");
    }

    /**
     * Sets <code>value</code> for variable cuscodVar.
     * @param value value to bind as cuscodVar
     */
    public void setcuscodVar(String value) {
        ensureVariableManager().setVariableValue("cuscodVar", value);

        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVORowImpl extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().getCurrentRow();
        Boolean newRow = false;
        if (extraParams == null) {
            extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().createRow();
            newRow = true;
        }
        extraParams.setCuscod(value);
        if (newRow) {
            am.getSiFromSoExtraVO().insertRow(extraParams);
        }
    }

    /**
     * Returns the variable value for dptcodVar.
     * @return variable value for dptcodVar
     */
    public String getdptcodVar() {
        return (String) ensureVariableManager().getVariableValue("dptcodVar");
    }

    /**
     * Sets <code>value</code> for variable dptcodVar.
     * @param value value to bind as dptcodVar
     */
    public void setdptcodVar(String value) {
        ensureVariableManager().setVariableValue("dptcodVar", value);

        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        SiFromSoExtraVORowImpl extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().getCurrentRow();
        Boolean newRow = false;
        if (extraParams == null) {
            extraParams = (SiFromSoExtraVORowImpl) am.getSiFromSoExtraVO().createRow();
            newRow = true;
        }
        extraParams.setDptcod(value);
        if (newRow) {
            am.getSiFromSoExtraVO().insertRow(extraParams);
        }
    }

    /**
     * Returns the variable value for curcodVar.
     * @return variable value for curcodVar
     */
    public String getcurcodVar() {
        return (String) ensureVariableManager().getVariableValue("curcodVar");
    }

    /**
     * Sets <code>value</code> for variable curcodVar.
     * @param value value to bind as curcodVar
     */
    public void setcurcodVar(String value) {
        ensureVariableManager().setVariableValue("curcodVar", value);
    }

    /**
     * Returns the variable value for shiseqVar.
     * @return variable value for shiseqVar
     */
    public Integer getshiseqVar() {
        return (Integer) ensureVariableManager().getVariableValue("shiseqVar");
    }

    /**
     * Sets <code>value</code> for variable shiseqVar.
     * @param value value to bind as shiseqVar
     */
    public void setshiseqVar(Integer value) {
        ensureVariableManager().setVariableValue("shiseqVar", value);
    }

    /**
     * Returns the variable value for itmnumVar.
     * @return variable value for itmnumVar
     */
    public String getitmnumVar() {
        return (String) ensureVariableManager().getVariableValue("itmnumVar");
    }

    /**
     * Sets <code>value</code> for variable itmnumVar.
     * @param value value to bind as itmnumVar
     */
    public void setitmnumVar(String value) {
        ensureVariableManager().setVariableValue("itmnumVar", value);
    }


    /**
     * Returns the variable value for schdatToVar.
     * @return variable value for schdatToVar
     */
    public Date getschdatToVar() {
        return (Date) ensureVariableManager().getVariableValue("schdatToVar");
    }

    /**
     * Sets <code>value</code> for variable schdatToVar.
     * @param value value to bind as schdatToVar
     */
    public void setschdatToVar(Date value) {
        ensureVariableManager().setVariableValue("schdatToVar", value);
    }

    /**
     * Returns the variable value for schdatFromVar.
     * @return variable value for schdatFromVar
     */
    public Date getschdatFromVar() {
        return (Date) ensureVariableManager().getVariableValue("schdatFromVar");
    }

    /**
     * Sets <code>value</code> for variable schdatFromVar.
     * @param value value to bind as schdatFromVar
     */
    public void setschdatFromVar(Date value) {
        ensureVariableManager().setVariableValue("schdatFromVar", value);
    }

    /**
     * Returns the variable value for poNumVar.
     * @return variable value for poNumVar
     */
    public String getpoNumVar() {
        return (String) ensureVariableManager().getVariableValue("poNumVar");
    }

    /**
     * Sets <code>value</code> for variable poNumVar.
     * @param value value to bind as poNumVar
     */
    public void setpoNumVar(String value) {
        ensureVariableManager().setVariableValue("poNumVar", value);
    }

    /**
     * Returns the variable value for shpnmNoVar.
     * @return variable value for shpnmNoVar
     */
    public String getshpnmNoVar() {
        return (String) ensureVariableManager().getVariableValue("shpnmNoVar");
    }

    /**
     * Sets <code>value</code> for variable shpnmNoVar.
     * @param value value to bind as shpnmNoVar
     */
    public void setshpnmNoVar(String value) {
        ensureVariableManager().setVariableValue("shpnmNoVar", value);
    }

    /**
     * Returns the variable value for soNoVar.
     * @return variable value for soNoVar
     */
    public String getsoNoVar() {
        return (String) ensureVariableManager().getVariableValue("soNoVar");
    }

    /**
     * Sets <code>value</code> for variable soNoVar.
     * @param value value to bind as soNoVar
     */
    public void setsoNoVar(String value) {
        ensureVariableManager().setVariableValue("soNoVar", value);
    }
}

