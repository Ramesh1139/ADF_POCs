package xts.salinv.model.views;

import java.sql.Types;

import java.text.ParseException;

import java.util.Objects;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.RowSetIterator;

import xts.common.model.framework.GenericEntityImpl;
import xts.common.model.framework.GenericViewObjectImpl;
import xts.common.model.framework.db.PLSQLCall;

import xts.salinv.model.services.XTSSalInvAMImpl;
import xts.salinv.model.views.common.TciCusfldHeaderVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 19 16:16:25 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TciCusfldHeaderVOImpl extends GenericViewObjectImpl implements TciCusfldHeaderVO {

    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(TciCusfldHeaderVOImpl.class);

    final String validateFunction = "DP_SI.PL_VALIDATE_TCI_CUSFLD";
    final String updateFunction = "DP_SI.PL_UPDATE_CUSFLD";
    final String module = "C01H";

    /**
     * This is the default constructor (do not remove).
     */
    public TciCusfldHeaderVOImpl() {
    }

    //
    // Methods for calling PLSQL
    //
    public void plValidateCusfldHeader(String validateOption) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        RowSetIterator rsi = this.createRowSetIterator(null);

        String divcod = am.getTciCusfldHeaderVO().getdivcodCicfVar();
        Long runnum = am.getTciCusfldHeaderVO().getrunnumCiCfVar();
        String stscod = "AT";

        TciCusfldHeaderVORowImpl row;
        String anonymousBlock = "";
        int count = 0;

        while (rsi.hasNext()) {
            row = (TciCusfldHeaderVORowImpl) rsi.next();
            //For testing
            count++;

            if (!Objects.equals(row.getFldDbVal(), row.getFldEditVal())) {
                String fldEditVal = row.getFldEditVal();
                if (fldEditVal != null) {
                    fldEditVal = "'" + fldEditVal + "'";
                }

                anonymousBlock = "declare \n  rt TCI_CUSFLD%ROWTYPE; \nbegin \n";

                anonymousBlock = anonymousBlock + "  rt." + "CICF_DIVCOD" + " := '" + divcod + "'; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_RUNNUM" + " := " + runnum + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_SO_RUNNUM" + " := " + 0 + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_SHISEQ" + " := " + 0 + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_ITMSEQ" + " := " + 0 + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_FLD_ID" + " := " + row.getFieldId() + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_VAL" + " := " + fldEditVal + "; \n";

                anonymousBlock = anonymousBlock + "  " + validateFunction + " ('" + module + "',rt,'" + stscod + "','" + validateOption + "'); \n" + "end;";

                LOGGER.info(anonymousBlock);

                PLSQLCall dc = new PLSQLCall(anonymousBlock, validateFunction, this.getDBTransaction());
                try {
                    dc.executeRaw();
                } catch (JboException err) {
                    ((GenericEntityImpl) ((TciMstVORowImpl) am.getTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(err);
                }
            }
        }

        rsi.closeRowSetIterator();
        LOGGER.info("Row count: " + count);
    }

    public void plUpdateCusfldHeader() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        Boolean dirtyFlag = am.getDirtyFlag();
        RowSetIterator rsi = this.createRowSetIterator(null);
        TciCusfldHeaderVORowImpl row;
        String anonymousBlock = "";
        String action = "";
        String divcod = am.getTciCusfldHeaderVO().getdivcodCicfVar();
        Long runnum = am.getTciCusfldHeaderVO().getrunnumCiCfVar();
        String fldEditVal;

        while (rsi.hasNext()) {
            row = (TciCusfldHeaderVORowImpl) rsi.next();
            action = "";

            fldEditVal = row.getFldEditVal();

            if (fldEditVal != null) {
                if (row.getDataType().equalsIgnoreCase("D")) {
                    try {
                        fldEditVal = am.formatDate(fldEditVal);
                    } catch (ParseException e) {
                        throw new JboException("Invalid Date: " + fldEditVal);
                    }
                }
            }

            if ((row.getFldEditVal() != null) && (row.getFldDbVal() == null)) {
                //insert
                action = "I";
            } else if ((row.getFldEditVal() == null) && (row.getFldDbVal() != null)) {
                //delete
                action = "D";
            } else if ((row.getFldEditVal() != null) && (row.getFldDbVal() != null)) {
                //update
                if (!row.getFldEditVal().equalsIgnoreCase(row.getFldDbVal())) {
                    action = "U";
                }
            }

            if (action != null && !action.isEmpty()) {

                if (!dirtyFlag) {
                    am.setDirtyFlag(true);
                }

                if (fldEditVal != null) {
                    fldEditVal = "'" + fldEditVal + "'";
                }

                anonymousBlock = "declare \n  rt TCI_CUSFLD%ROWTYPE; \nbegin \n";

                anonymousBlock = anonymousBlock + "  rt." + "CICF_DIVCOD" + " := '" + divcod + "'; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_RUNNUM" + " := " + runnum + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_SO_RUNNUM" + " := " + 0 + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_SHISEQ" + " := " + 0 + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_ITMSEQ" + " := " + 0 + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_FLD_ID" + " := " + row.getFieldId() + "; \n";
                anonymousBlock = anonymousBlock + "  rt." + "CICF_VAL" + " := " + fldEditVal + "; \n";

                anonymousBlock = anonymousBlock + "  " + updateFunction + " (rt,'" + action + "'); \n" + "end;";

                LOGGER.info(anonymousBlock);

                PLSQLCall dc = new PLSQLCall(anonymousBlock, updateFunction, this.getDBTransaction());
                try {
                    dc.executeRaw();
                } catch (JboException err) {
                    ((GenericEntityImpl) ((TciMstVORowImpl) am.getTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(err);
                }
            } else {
                LOGGER.info("NO ACTION. " + divcod + ";" + runnum + ";" + 0 + ";" + 0 + ";" + 0 + ";" + row.getFieldId());
            }
        }

        rsi.closeRowSetIterator();
    }

    //
    // Methods
    //
    public void cusfldHdrExeQry() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl mstRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();

        PLSQLCall dc = new PLSQLCall("? := DP_SI.F_CHECK_TEMPLATE", this.getDBTransaction());
        dc.addRet("ret", Types.INTEGER);
        dc.addIn(mstRow.getCimsDivcod());
        dc.addIn(module);
        dc.addIn(mstRow.getCimsCuscod());
        dc.execute();
        Integer count = (Integer) dc.getObj("ret");

        LOGGER.info("template count: " + count);

        String cus;
        if (count.equals(0)) {
            cus = "*";
        } else {
            cus = mstRow.getCimsCuscod();
        }

        this.setdivcodCicfVar(mstRow.getCimsDivcod());
        this.setcuscodCicfVar(cus);
        this.setrunnumCiCfVar(mstRow.getCimsRunnum());
        this.executeQuery();

    }

    public void hdrValidateUpdate() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String editMode = (String) am.getUserDataEntry("custom_ACCESS_MODE");
        if (editMode != null && editMode.equalsIgnoreCase("edit")) {
            this.plValidateCusfldHeader("ONE");
            this.plUpdateCusfldHeader();
            this.cusfldHdrExeQry();
        }
    }
    
    public String hdrChkForMstLst() {
        TciCusfldHeaderVORowImpl curRow = (TciCusfldHeaderVORowImpl)this.getCurrentRow();
        if (curRow!=null)
            return curRow.getIsMsttab();
        return "N";
    }

    /**
     * Returns the bind variable value for divcodCicfVar.
     * @return bind variable value for divcodCicfVar
     */
    public String getdivcodCicfVar() {
        return (String) getNamedWhereClauseParam("divcodCicfVar");
    }

    /**
     * Sets <code>value</code> for bind variable divcodCicfVar.
     * @param value value to bind as divcodCicfVar
     */
    public void setdivcodCicfVar(String value) {
        setNamedWhereClauseParam("divcodCicfVar", value);
    }

    /**
     * Returns the bind variable value for cuscodCicfVar.
     * @return bind variable value for cuscodCicfVar
     */
    public String getcuscodCicfVar() {
        return (String) getNamedWhereClauseParam("cuscodCicfVar");
    }

    /**
     * Sets <code>value</code> for bind variable cuscodCicfVar.
     * @param value value to bind as cuscodCicfVar
     */
    public void setcuscodCicfVar(String value) {
        setNamedWhereClauseParam("cuscodCicfVar", value);
    }

    /**
     * Returns the bind variable value for runnumCiCfVar.
     * @return bind variable value for runnumCiCfVar
     */
    public Long getrunnumCiCfVar() {
        return (Long) getNamedWhereClauseParam("runnumCiCfVar");
    }

    /**
     * Sets <code>value</code> for bind variable runnumCiCfVar.
     * @param value value to bind as runnumCiCfVar
     */
    public void setrunnumCiCfVar(Long value) {
        setNamedWhereClauseParam("runnumCiCfVar", value);
    }
}

