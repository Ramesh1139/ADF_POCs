package xts.salinv.model.views;

import java.math.BigDecimal;

import java.sql.Clob;
import java.sql.Types;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.HashMap;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import xts.common.model.framework.GenericApplicationModuleImpl;
import xts.common.model.framework.GenericEntityImpl;
import xts.common.model.framework.GenericViewObjectImpl;
import xts.common.model.framework.beans.DisabledLogicContainerModel;
import xts.common.model.framework.db.PLSQLCall;

import xts.salinv.model.services.XTSSalInvAMImpl;
import xts.salinv.model.views.common.TciMstVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 01 14:49:19 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TciMstVOImpl extends GenericViewObjectImpl implements TciMstVO {

    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(TciMstVORowImpl.class);
    private final int selectAllMax = 50;

    /**
     * This is the default constructor (do not remove).
     */
    public TciMstVOImpl() {
    }

    @Override
    public String getCriteriaItemClause(ViewCriteriaItem viewCriteriaItem) {
        Object bindVariableValue = viewCriteriaItem.getValueFromVariableManager(this.getVariableManager());

        if ((viewCriteriaItem.getColumnNameForQuery() != null && viewCriteriaItem.getColumnNameForQuery().equals("TciMst.CIMS_EDI_SND")) &&
            bindVariableValue != null && (viewCriteriaItem.getOperator() != null && viewCriteriaItem.getOperator().equals("="))) {
            return " NVL(TciMst.CIMS_EDI_SND,'N') = '" + bindVariableValue + "' ";
        }

        return super.getCriteriaItemClause(viewCriteriaItem);
    }

    public void prepareDisable() {
        if (ADFContext.getCurrent().isJEE()) {
            XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
            DisabledLogicContainerModel disabledControlModel = (DisabledLogicContainerModel) ADFContext.getCurrent()
                                                                                                       .getPageFlowScope()
                                                                                                       .get("XTSDisabledLogicContainerBean");
            TciMstVORowImpl mstRow = (TciMstVORowImpl) this.getCurrentRow();
            if (mstRow != null) {
                //Shipment Item Count
                String key = "TCI_MST:" + mstRow.getCimsDivcod() + "|" + mstRow.getCimsRunnum();
                TciActshpitmVOImpl shpitm = am.getTciActshpitmVO();
                int shpitmCount = shpitm.getFetchedRowCount();
                disabledControlModel.addData(key, "SHPITM_COUNT", shpitmCount);
                //DP061
                String dp061 = am.checkDptSetcod(mstRow.getCimsDivcod(), mstRow.getCimsDptcod(), mstRow.getCimsCuscod(), "061");
                disabledControlModel.addData(key, "dp061", dp061);
                //SI Status
                disabledControlModel.addData(key, "CimsStscod", mstRow.getCimsStscod());
                //Update Customer Related Set Codes
                mstRow.updateCuscodRelatedSetcod();
                //
                String paytrmcodDesExists = paytrmcodDesExists();
                disabledControlModel.addData(key, "paytrmcodDesExists", paytrmcodDesExists);
                //
                DummyVOImpl dummy = am.getDummyVO();
                dummy.setDisableCiaiActqty("N");
            }
        }
    }

    public void setSearchDivcodVar(String divcod) {

        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();

        this.setcimsDivcodCoreVar(divcod);
        this.setcimsDivcodAdvVar(divcod);

        // Prepare Dummy VO
        am.getDummyVO().createAndInsertRowIfNotExists();

    }

    public Date defaultDatFrom() {
        Date tmp = new Date(Date.getCurrentDate());
        Date date = new oracle.jbo.domain.Date(tmp.addMonths(-4));
        Object obj = date.dateValue();

        return Date.toDate(obj.toString());
    }

    public Date defaultDatTo() {
        Date tmp = new Date(Date.getCurrentDate());
        Object obj = tmp.dateValue();

        return Date.toDate(obj.toString());
    }

    public String defaultYear() {
        Calendar cal = Calendar.getInstance();
        DateFormat df = new SimpleDateFormat("yy");

        return String.format("%1$" + 2 + "s", df.format(cal.getTime())).replace(' ', '0');
    }

    public String defaultDpt(String divcod, String userId) {
        PLSQLCall dc = new PLSQLCall("? := DP_USER.GET_DEF_DPTCOD", this.getDBTransaction());
        dc.addRet("ret", Types.VARCHAR);
        dc.addIn(divcod);
        dc.addIn(userId);
        dc.execute();
        Object ret = dc.getObj("ret");
        return (String) ret;
    }

    public void createTciMst(String divcod) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String userId = am.getUserName();
        ViewObjectImpl vo = am.getInsertTciMstVO();
        vo.executeEmptyRowSet();
        TciMstVORowImpl row = (TciMstVORowImpl) vo.createRow();
        //Set Default Values
        DefaultValuesVORowImpl defaultVal = (DefaultValuesVORowImpl) am.getDefaultValuesVO().getCurrentRow();
        String op590 = "";
        String checkDpt = "";
        if (defaultVal != null) {
            op590 = am.checkSetcod(divcod, defaultVal.getCuscod(), "590");
            checkDpt = am.checkDpt(defaultVal.getDptcod(), divcod, userId);
        }

        if (defaultVal != null && "Y".equalsIgnoreCase(op590) && "true".equalsIgnoreCase(checkDpt)) {
            row.setCimsDivcod(defaultVal.getDivcod());
            row.setCimsDptcod(defaultVal.getDptcod());
            row.setCimsCuscod(defaultVal.getCuscod());
            row.setCimsYear(defaultVal.getYear());
        } else {
            row.setCimsDivcod(divcod);
            row.setCimsDptcod(defaultDpt(divcod, userId));
            row.setCimsYear(defaultYear());
        }
        row.setCimsRunnum(new Long(-2));
        //
        vo.insertRow(row);
    }

    public Long insertTciMst() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl newRow = (TciMstVORowImpl) am.getInsertTciMstVO().getCurrentRow();
        if (newRow != null) {
            //Log Default Values
            String op590 = am.checkSetcod(newRow.getCimsDivcod(), newRow.getCimsCuscod(), "590");
            if (op590 != null && op590.equals("Y")) {
                Boolean newDefaultRow = false;
                DefaultValuesVORowImpl defaultVal = (DefaultValuesVORowImpl) am.getDefaultValuesVO().getCurrentRow();
                if (defaultVal == null) {
                    defaultVal = (DefaultValuesVORowImpl) am.getDefaultValuesVO().createRow();
                    newDefaultRow = true;
                }
                defaultVal.setDivcod(newRow.getCimsDivcod());
                defaultVal.setDptcod(newRow.getCimsDptcod());
                defaultVal.setYear(newRow.getCimsYear());
                defaultVal.setCuscod(newRow.getCimsCuscod());
                if (newDefaultRow)
                    am.getDefaultValuesVO().insertRow(defaultVal);
            }

            //lpad year
            if (newRow.getCimsYear().length() < 2) {
                String ret = String.format("%1$" + 2 + "s", newRow.getCimsYear()).replace(' ', '0');
                newRow.setCimsYear(ret);
            }

            try {
                PLSQLCall dc = new PLSQLCall("DP_SI.PL_CREATE_TCI_MST", this.getDBTransaction());
                LOGGER.info("DP_SI.PL_CREATE_TCI_MST parameters: " + newRow.getCimsDivcod() + ";" + newRow.getCimsDptcod() + ";" + newRow.getCimsYear() + ";" +
                            newRow.getCimsCuscod() + ";" + newRow.getSoNumInsert());
                dc.addIn(newRow.getCimsDivcod());
                dc.addIn(newRow.getCimsDptcod());
                dc.addIn(newRow.getCimsYear());
                dc.addIn(newRow.getCimsCuscod());
                dc.addIn(newRow.getSoNumInsert());
                dc.addOut("ret", Types.DOUBLE);
                dc.execute();
                Object ret = dc.getObj("ret");
                Long runNumber = ((Number) ret).longValue();

                applyInsertViewCriteria(newRow.getCimsDivcod(), runNumber);

                am.setUserDataEntry("EDIT_MODE", "A"); //For Validate Whole SI

                if (newRow.getSoNumInsert() != null) {
                    newRow.remove();
                } else {
                    newRow.remove();
                    return runNumber; //Only check for Additional Amount Template when no SO Number is inputted
                }

            } catch (JboException e) {
                ((GenericEntityImpl) ((TciMstVORowImpl) am.getInsertTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(e);
            }
        }

        return null;
    }

    public void applyInsertViewCriteria(String divcod, Long runnum) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        ViewCriteria vc = am.getTciMstVO().getViewCriteria("InsertTciMstVOCriteria");
        am.getTciMstVO().setcimsDivcodVar(divcod);
        am.getTciMstVO().setcimsRunnumVar(runnum);
        am.getTciMstVO().applyViewCriteria(vc);
        am.getTciMstVO().executeQuery();

        TciMstVORowImpl newlySavedRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
        if (newlySavedRow != null) {
            newlySavedRow.setCimsRunnum(runnum);
            newlySavedRow.xtsLock();
        }
    }

    public String plAddamtTpldefChkAll(String viewInstance, Long cimsRunnum) {
        String divcod, cuscod, dptcod;
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl row;

        row = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
        divcod = row.getCimsDivcod();
        cuscod = row.getCimsCuscod();
        dptcod = row.getCimsDptcod();

        if (divcod != null) {
            PLSQLCall dc = new PLSQLCall("? := DP_ADDAMT_TPL.PL_ADDAMT_TPLDEF_CHK_ALL", this.getDBTransaction());
            dc.addRet("ret", Types.VARCHAR);
            dc.addIn(divcod);
            dc.addIn(cuscod);
            dc.addIn(dptcod);
            if (cimsRunnum == null)
                dc.addIn(row.getCimsRunnum());
            else
                dc.addIn(cimsRunnum);
            dc.addIn("SI");
            dc.execute();
            Object ret = dc.getObj("ret");

            if (ret != null) {
                LOGGER.info("plAddamtTpldefChkAll params: " + divcod + ";" + cuscod + ";" + dptcod + " RETURN : " + (String) ret);
                return (String) ret;
            }
        }

        if ("InsertTciMstVO".equals(viewInstance)) {
            applyInsertViewCriteria(divcod, cimsRunnum); //When no additional amount template is available
        }
        return null;
    }

    public String applyDefault(Long cimsRunnum) {
        String divcod, cuscod, dptcod;
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl row;
        row = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
        divcod = row.getCimsDivcod();
        cuscod = row.getCimsCuscod();
        dptcod = row.getCimsDptcod();

        if (divcod != null) {
            PLSQLCall dc = new PLSQLCall("? := DP_ADDAMT_TPL.PL_ADDAMT_TPLDEF", this.getDBTransaction());
            dc.addRet("ret", Types.VARCHAR);
            dc.addIn(divcod);
            dc.addIn(cuscod);
            dc.addIn(dptcod);
            if (cimsRunnum == null)
                dc.addIn(row.getCimsRunnum());
            else
                dc.addIn(cimsRunnum);
            dc.addIn("SI");
            dc.addIn(4);
            dc.addIn(null);
            dc.addIn(null);
            dc.addIn(null);
            dc.addIn(null);
            dc.execute();
            Object ret = dc.getObj("ret");

            if (ret != null) {
                am.getTciAddAmtVO().executeQuery();
                return (String) ret;
            }
        }

        return null;
    }

    public void removeCreatedTciMst() {
        GenericApplicationModuleImpl appModule = (GenericApplicationModuleImpl) this.getApplicationModule();
        appModule.rollbackTransaction();
    }

    public void commitSi() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();

        TciCusfldHeaderVOImpl cusFldVo = am.getTciCusfldHeaderVO();
        cusFldVo.plValidateCusfldHeader("ONE");
        cusFldVo.plUpdateCusfldHeader();
        cusFldVo.cusfldHdrExeQry();

        TciCusfldShpitmVOImpl cusFldShpitmVo = am.getTciCusfldShpitmVO();
        cusFldShpitmVo.plValidateCusfldShi("ONE");
        cusFldShpitmVo.plUpdateCusfldShi();
        cusFldShpitmVo.cusfldShiExeQry();

        postChanges();

        validateWholeSi();

        updateBeforeCommit();

        String editMode = (String) am.getUserDataEntry("EDIT_MODE");
        if (editMode != null && editMode.equalsIgnoreCase("A"))
            am.setUserDataEntry("EDIT_MODE", "E");

    }

    public void reExeCusfld() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();

        TciCusfldHeaderVOImpl cusFldVo = am.getTciCusfldHeaderVO();
        cusFldVo.cusfldHdrExeQry();

        TciCusfldShpitmVOImpl cusFldShpitmVo = am.getTciCusfldShpitmVO();
        cusFldShpitmVo.cusfldShiExeQry();
    }

    public void reexeQuery() {
        Row row = this.getCurrentRow();
        Key key = row.getKey();
        int rangeIndexOfCurrentRow = this.getRangeIndexOf(row);

        this.executeQuery();

        Row[] res = this.findByKey(key, 1);
        if (res != null && res.length == 1) {
            this.setCurrentRow(res[0]);
            //findAssociatedEntity(arg0, arg1, arg2, arg3, arg4, arg5);
            if (rangeIndexOfCurrentRow >= 0) {
                this.scrollRangeTo(res[0], rangeIndexOfCurrentRow);
            }

        }
    }

    public void setCustomEditMode(String edit) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        if (edit != null)
            am.setUserDataEntry("EDIT_MODE", edit);
    }

    public void postChanges() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl currentRow = (TciMstVORowImpl) this.getCurrentRow();
        if (currentRow != null)
            am.getTransaction().postChanges();
    }

    public void validateAllBlocks() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String edit = (String) am.getUserDataEntry("EDIT_MODE");
        TciMstVORowImpl row = (TciMstVORowImpl) this.getCurrentRow();
        if (row != null) {
            try {

                PLSQLCall dc = new PLSQLCall("DP_SI.PL_VALIDATE_ALL_BLOCK", this.getDBTransaction());
                dc.addIn(row.getCimsDivcod());
                dc.addIn(row.getCimsRunnum());
                dc.addIn("AT");
                dc.addIn(edit);
                dc.addIn("ONE");
                dc.addIn("Y");
                dc.execute();

            } catch (JboException ex) {
                ((GenericEntityImpl) row.getEntityForAttribute("CimsRunnum")).convertException(ex);
            }
        }
    }

    public void validateWholeSi() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String edit = (String) am.getUserDataEntry("EDIT_MODE");
        TciMstVORowImpl row = (TciMstVORowImpl) this.getCurrentRow();
        LOGGER.info("**validateWholeSi Customer Edit Mode: " + edit);
        if (row != null) {
            try {
                PLSQLCall dc = new PLSQLCall("DP_SI.PL_VALIDATE_WHOLE_SI", this.getDBTransaction());
                dc.addIn(row.getCimsDivcod());
                dc.addIn(row.getCimsRunnum());
                dc.addIn(row.getCimsStscod());
                dc.addIn(edit);
                dc.execute();
                row.refresh(ViewRowImpl.REFRESH_WITH_DB_ONLY_IF_UNCHANGED);
            } catch (JboException ex) {
                ((GenericEntityImpl) row.getEntityForAttribute("CimsRunnum")).convertException(ex);
            }
        }
    }

    public void updateBeforeCommit() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl currentRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
        if (currentRow != null) {
            PLSQLCall dc = new PLSQLCall("DP_SI.PL_UPDATE_BEFORE_COMMIT", this.getDBTransaction());
            dc.addIn(currentRow.getCimsDivcod());
            dc.addIn(currentRow.getCimsRunnum());
            dc.addIn(currentRow.getCimsDptcod());
            dc.addIn(currentRow.getCimsYear());
            dc.execute();
            currentRow.refresh(ViewRowImpl.REFRESH_WITH_DB_ONLY_IF_UNCHANGED);
        }
    }

    public void ediComdatClr() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl row = (TciMstVORowImpl) this.getCurrentRow();
        if (row != null) {
            if (row.getCimsEdiComdat() == null) {
                throw new JboException(am.plGetMsgmst("3231"));
            } else {
                row.setCimsEdiComdat(null);
                if (row.getCimsEdiSndver() != null) {
                    row.setCimsEdiSndver(row.getCimsEdiSndver().add(BigDecimal.ONE));
                } else {
                    row.setCimsEdiSndver(BigDecimal.ONE);
                }
            }
        }
    }

    public String getAttachmentAccessRight() {
        String module = (String) this.getViewDef().getProperty("module");
        TciMstVORowImpl curRow = (TciMstVORowImpl) this.getCurrentRow();
        HashMap<String, HashMap<String, Boolean>> userPermissions = curRow.getUserPermissions();
        HashMap<String, Boolean> modulePemissions = userPermissions.get(module);

        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String editMode = (String) am.getUserDataEntry("custom_ACCESS_MODE");

        String accessRight;
        if (modulePemissions.get("CREATE") && (editMode != null && editMode.equalsIgnoreCase("edit"))) {
            if (curRow.getCimsStscod().equalsIgnoreCase("AT") || curRow.getCimsStscod().equalsIgnoreCase("SH") ||
                curRow.getCimsStscod().equalsIgnoreCase("AC")) {
                accessRight = "Y";
            } else
                accessRight = "N";
        } else
            accessRight = "N";

        if (modulePemissions.get("EDIT") && (editMode != null && editMode.equalsIgnoreCase("edit"))) {
            if (curRow.getCimsStscod().equalsIgnoreCase("AT") || curRow.getCimsStscod().equalsIgnoreCase("SH") ||
                curRow.getCimsStscod().equalsIgnoreCase("AC")) {
                accessRight = accessRight + "Y";
            } else
                accessRight = accessRight + "N";
        } else
            accessRight = accessRight + "N";

        if (modulePemissions.get("DELETE")) {
            if (curRow.getCimsStscod().equalsIgnoreCase("AT") || curRow.getCimsStscod().equalsIgnoreCase("SH") ||
                curRow.getCimsStscod().equalsIgnoreCase("AC")) {
                accessRight = accessRight + "Y";
            } else
                accessRight = accessRight + "N";
        } else
            accessRight = accessRight + "N";

        if (editMode == null || editMode.equalsIgnoreCase("readonly")) {
            accessRight = accessRight + "N";
        } else {
            accessRight = accessRight + "Y";
        }

        LOGGER.info("getAttachmentLink Step 1 - edit mode: " + editMode + "\naccess right: " + accessRight);
        return accessRight;
    }

    public void chkAttachmentAccess(String accessRight, String callModule) {
        String setcod = callModule.substring(callModule.length() - 3);
        String username = (String) ADFContext.getCurrent()
                                             .getSessionScope()
                                             .get("userName");
        TciMstVORowImpl row = (TciMstVORowImpl) this.getCurrentRow();
        if (row != null) {
            String div = row.getCimsDivcod();

            PLSQLCall dc = new PLSQLCall("? := DP_SI.FL_WEB_CHECKING", this.getDBTransaction());
            dc.addRet("ret", Types.VARCHAR);
            dc.addIn(username);
            dc.addIn(div);
            dc.addIn(setcod);
            dc.execute();
            Object ret = dc.getObj("ret");
            String webCheck = (String) ret;

            if (accessRight == null && (webCheck != null && !webCheck.equalsIgnoreCase("Y"))) {
                XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
                String errmsg = am.plGetMsgmst("544");
                throw new JboException(errmsg);
            }
        }
    }

    public void insertRecentUseLogAutonomous() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl currentRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
        if (currentRow != null) {
            String errmsg = "";
            PLSQLCall dc = new PLSQLCall("DP_RECENT.INS_RECENT_USE_AUTONOMOUS", this.getDBTransaction());
            dc.addIn(this.getuserIdVar());
            dc.addIn("CI");
            dc.addIn(currentRow.getCimsDivcod());
            dc.addIn(currentRow.getCimsRunnum());
            dc.addOut(errmsg, 1);
            dc.execute();
        }
    }

    public void delRecentUseLogAutonomous() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String editMode = (String) am.getUserDataEntry("EDIT_MODE");
        TciMstVORowImpl currentRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();

        if (currentRow != null && (editMode != null && editMode.equals("A"))) {
            String errmsg = "";
            PLSQLCall dc = new PLSQLCall("DP_RECENT.DEL_RECENT_USE_AUTONOMOUS", this.getDBTransaction());
            dc.addIn(this.getuserIdVar());
            dc.addIn("CI");
            dc.addIn(currentRow.getCimsDivcod());
            dc.addIn(currentRow.getCimsRunnum());
            dc.addOut(errmsg, 1);
            dc.execute();
        }
    }

    public boolean changeStatus(String changeTo, String deleteReason) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        boolean isVoUpdated = false;
        int estimatedRangePageCount = this.getEstimatedRangePageCount();
        int noOfProcessRecord = 0;
        String cimsStscod = null;

        DummyVORowImpl dummyVOCurrentRow = (DummyVORowImpl) am.getDummyVO().getCurrentRow();
        int noOfSelectedRecord = dummyVOCurrentRow.getSiChkboxCnt();
        LOGGER.info("**changeStatus noOfSelectedRecord: " + noOfSelectedRecord);

        if (noOfSelectedRecord == 0) {
            TciMstVORowImpl curRow = (TciMstVORowImpl) this.getCurrentRow();
            if (curRow != null) {
                curRow.setSelection(true);
                noOfSelectedRecord = dummyVOCurrentRow.getSiChkboxCnt();
            } else {
                throw new JboException(am.plGetMsgmst("5342"));
            }
        }

        if (noOfSelectedRecord > 0) {
            int maxSiToSelect = Integer.parseInt(am.plGetSyspara("P_MAX_SI_PRINT"));
            if (noOfSelectedRecord > maxSiToSelect)
                throw new JboException(am.plGetMsgmst("5250").replace("##F01##", Integer.toString(maxSiToSelect)));
        }

        for (int i = 0; i < estimatedRangePageCount; i++) {
            this.scrollToRangePage(i + 1);
            Row[] rows = this.getAllRowsInRange();
            for (Row row : rows) {
                TciMstVORowImpl rowTciMst = (TciMstVORowImpl) row;
                if (rowTciMst.getSelection() != null && rowTciMst.getSelection()) {
                    //Check for same status
                    LOGGER.info("cimsStscod: " + cimsStscod + " current row status: " + rowTciMst.getCimsStscod());
                    if (cimsStscod != null && !cimsStscod.equalsIgnoreCase(rowTciMst.getCimsStscod())) {
                        throw new JboException(am.plGetMsgmst("5249"));
                    }
                    cimsStscod = rowTciMst.getCimsStscod();
                    noOfProcessRecord++;
                }
                if (noOfSelectedRecord == noOfProcessRecord) {
                    break;
                }
            }
            if (noOfSelectedRecord == noOfProcessRecord) {
                break;
            }
        }

        noOfProcessRecord = 0;
        JboException valError = null;
        boolean validationPass = false;
        for (int i = 0; i < estimatedRangePageCount; i++) {
            this.scrollToRangePage(i + 1);
            Row[] rows = this.getAllRowsInRange();

            for (Row row : rows) {
                TciMstVORowImpl rowTciMst = (TciMstVORowImpl) row;

                if (rowTciMst.getSelection() != null && rowTciMst.getSelection()) {
                    LOGGER.info("*** Selected SI: " + rowTciMst.getCimsDocnbr() + " From " + rowTciMst.getCimsStscod() + " to " + changeTo);

                    PLSQLCall dc;
                    try {
                        dc = new PLSQLCall("DP_SI.PL_CHANGE_STATUS_VLD", this.getDBTransaction());
                        dc.addIn(rowTciMst.getCimsDivcod());
                        dc.addIn(rowTciMst.getCimsRunnum());
                        dc.addIn(rowTciMst.getCimsAmddat());
                        dc.addIn(rowTciMst.getCimsStscod());
                        dc.addIn(changeTo);
                        dc.addIn(deleteReason);
                        dc.execute();
                        validationPass = true;
                    } catch (JboException ex) {
                        LOGGER.info("*** Selected SI: " + rowTciMst.getCimsDocnbr() + " with error");
                        validationPass = false;
                        if (valError == null) {
                            valError = new JboException("");
                        }
                        valError =
                            ((GenericEntityImpl) ((TciMstVORowImpl) am.getTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum"))
                            .prepareException(ex, valError);
                        // ((GenericEntityImpl) ((TciMstVORowImpl) am.getTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(ex);
                    }

                    if (validationPass) {
                        try {
                            dc = new PLSQLCall("DP_SI.PL_CHANGE_STATUS_UPD", this.getDBTransaction());
                            dc.addIn(rowTciMst.getCimsDivcod());
                            dc.addIn(rowTciMst.getCimsRunnum());
                            dc.addIn(rowTciMst.getCimsAmddat());
                            dc.addIn(rowTciMst.getCimsStscod());
                            dc.addIn(changeTo);
                            dc.addIn(deleteReason);
                            dc.execute();
                            am.getTransaction().commit();
                            rowTciMst.refresh(ViewRowImpl.REFRESH_WITH_DB_FORGET_CHANGES);
                        } catch (JboException ex) {
                            ((GenericEntityImpl) ((TciMstVORowImpl) am.getTciMstVO().getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(ex);
                        }
                    }

                    if (rowTciMst.getSelection())
                        rowTciMst.setSelection(false);
                    noOfProcessRecord++;
                }

                if (noOfSelectedRecord == noOfProcessRecord) {
                    break;
                }
            }

            if (noOfSelectedRecord == noOfProcessRecord) {
                break;
            }
        }
        if (valError != null) {
            throw valError;
        }
        isVoUpdated = true;

        if (isVoUpdated) {
            //refresh detail table
            am.getTciActshpitmVO().executeQuery();

            LOGGER.info("end noOfSelectedRecord: " + noOfSelectedRecord);
            // Reset Count = 0
            if (dummyVOCurrentRow != null)
                dummyVOCurrentRow.setSiChkboxCnt(0);
        }

        return isVoUpdated;
    }

    public void cuscodChgActions() {
        assignCuscodDefault();
        delCusfldHdrRec();
    }

    public void assignCuscodDefault() {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl currentRow = (TciMstVORowImpl) this.getCurrentRow();

        if (currentRow != null) {
            TciPrtVORowImpl tciPrtRow = (TciPrtVORowImpl) am.getTciPrtVO().getCurrentRow();
            TciDesVORowImpl tciDesRow = (TciDesVORowImpl) am.getTciDesVO().getCurrentRow();

            // specify a list of return params from rowtype
            try {
                String sql =
                    " declare " + " v_rec_tci_mst tci_mst%rowtype;" + " v_rec_tci_prt tci_prt%rowtype;" + " begin " +
                    " DP_SI.PL_GET_CUSCOD_DEFAULT(:p1, :p2, :p3, v_rec_tci_mst, v_rec_tci_prt, :p4);" + " :p5  := v_rec_tci_mst.cims_curcod;" +
                    " :p6  := v_rec_tci_prt.cipt_nam;" + " :p7  := v_rec_tci_prt.cipt_adr1;" + " :p8  := v_rec_tci_prt.cipt_adr2;" +
                    " :p9  := v_rec_tci_prt.cipt_adr3;" + " :p10 := v_rec_tci_prt.cipt_adr4;" + " :p11 := v_rec_tci_mst.cims_paytrmcod;" +
                    " :p12 := v_rec_tci_mst.cims_paytrmdes;" + " :p13 := v_rec_tci_mst.cims_cndsalcod;" + " :p14 := v_rec_tci_mst.cims_cndsaldes;" +
                    " :p15 := v_rec_tci_prt.cipt_fwdcod;" + " :p16 := v_rec_tci_prt.cipt_dst;" + " :p17 := v_rec_tci_prt.cipt_accadr1;" +
                    " :p18 := v_rec_tci_prt.cipt_accadr2;" + " :p19 := v_rec_tci_prt.cipt_accadr3;" + " :p20 := v_rec_tci_prt.cipt_accadr4;" +
                    " :p21 := v_rec_tci_prt.cipt_vat_no;" + " :p22 := v_rec_tci_prt.cipt_accnam;" + " :p23 := v_rec_tci_mst.cims_ldp;" +
                    " :p24 := v_rec_tci_mst.cims_edi_snd;" + " :p25 := v_rec_tci_mst.cims_bildat_ref;" + " end;";

                PLSQLCall dc = new PLSQLCall(sql, null, this.getDBTransaction());
                dc.addIn("p1", currentRow.getCimsDivcod());
                dc.addIn("p2", currentRow.getCimsDptcod());
                dc.addIn("p3", currentRow.getCimsCuscod());
                // define access to all return params
                dc.addOut("p4", Types.CLOB);
                dc.addOut("p5", Types.VARCHAR);
                dc.addOut("p6", Types.VARCHAR);
                dc.addOut("p7", Types.VARCHAR);
                dc.addOut("p8", Types.VARCHAR);
                dc.addOut("p9", Types.VARCHAR);
                dc.addOut("p10", Types.VARCHAR);
                dc.addOut("p11", Types.VARCHAR);
                dc.addOut("p12", Types.VARCHAR);
                dc.addOut("p13", Types.VARCHAR);
                dc.addOut("p14", Types.VARCHAR);
                dc.addOut("p15", Types.VARCHAR);
                dc.addOut("p16", Types.VARCHAR);
                dc.addOut("p17", Types.VARCHAR);
                dc.addOut("p18", Types.VARCHAR);
                dc.addOut("p19", Types.VARCHAR);
                dc.addOut("p20", Types.VARCHAR);
                dc.addOut("p21", Types.VARCHAR);
                dc.addOut("p22", Types.VARCHAR);
                dc.addOut("p23", Types.VARCHAR);
                dc.addOut("p24", Types.VARCHAR);
                dc.addOut("p25", Types.VARCHAR);

                dc.executeRaw();

                // access return params
                Clob ret = (Clob) dc.getObj("p4");
                String rmk = am.clobToString(ret);
                tciDesRow.setCidsShpdes(rmk);
                currentRow.setCimsCurcod((String) dc.getObj("p5"));
                tciPrtRow.setCiptNam((String) dc.getObj("p6"));
                tciPrtRow.setCiptAdr1((String) dc.getObj("p7"));
                tciPrtRow.setCiptAdr2((String) dc.getObj("p8"));
                tciPrtRow.setCiptAdr3((String) dc.getObj("p9"));
                tciPrtRow.setCiptAdr4((String) dc.getObj("p10"));
                currentRow.setCimsPaytrmcod((String) dc.getObj("p11"));
                currentRow.setCimsPaytrmdes((String) dc.getObj("p12"));
                currentRow.setCimsCndsalcod((String) dc.getObj("p13"));
                currentRow.setCimsCndsaldes((String) dc.getObj("p14"));
                tciPrtRow.setCiptFwdcod((String) dc.getObj("p15"));
                tciPrtRow.setCiptDst((String) dc.getObj("p16"));
                tciPrtRow.setCiptAccadr1((String) dc.getObj("p17"));
                tciPrtRow.setCiptAccadr2((String) dc.getObj("p18"));
                tciPrtRow.setCiptAccadr3((String) dc.getObj("p19"));
                tciPrtRow.setCiptAccadr4((String) dc.getObj("p20"));
                tciPrtRow.setCiptVatNo((String) dc.getObj("p21"));
                tciPrtRow.setCiptAccnam((String) dc.getObj("p22"));
                currentRow.setCimsLdp((String) dc.getObj("p23"));
                currentRow.setCimsEdiSnd((String) dc.getObj("p24"));
                currentRow.setCimsBildatRef((String) dc.getObj("p25"));

            } catch (JboException ex) {
                ((GenericEntityImpl) ((TciMstVORowImpl) this.getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(ex);
            }
        }
    }

    public void delCusfldHdrRec() {
        TciMstVORowImpl row = (TciMstVORowImpl) this.getCurrentRow();
        try {
            PLSQLCall dc;
            dc = new PLSQLCall("DP_SI.PL_DELETE_TCI_CUSFLD_HDR", this.getDBTransaction());
            dc.addIn(row.getCimsDivcod());
            dc.addIn(row.getCimsRunnum());
            dc.execute();
        } catch (JboException ex) {
            ((GenericEntityImpl) ((TciMstVORowImpl) this.getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(ex);
        }
    }

    public String paytrmcodDesExists() {

        TciMstVORowImpl row = (TciMstVORowImpl) this.getCurrentRow();
        PLSQLCall dc;

        try {
            dc = new PLSQLCall("? := DP_SI.F_ENABLE_DISABLE_BILDAT_REF", this.getDBTransaction());
            dc.addRet("ret", Types.VARCHAR);
            dc.addIn(row.getCimsPaytrmcod());
            dc.addIn(row.getCimsPaytrmdes());
            dc.execute();
            Object ret = dc.getObj("ret");
            return (String) ret;
        } catch (JboException ex) {
            ((GenericEntityImpl) ((TciMstVORowImpl) this.getCurrentRow()).getEntityForAttribute("CimsRunnum")).convertException(ex);
        }
        return null;
    }

    public String plPrintSi() {

        String callFormURL = "";

        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        TciMstVORowImpl curRow = (TciMstVORowImpl) this.getCurrentRow();


        if (curRow != null) {

            DummyVORowImpl dummyVOCurrentRow = (DummyVORowImpl) am.getDummyVO().getCurrentRow();

            // No of record selected
            int noOfSelectedRecord = dummyVOCurrentRow.getSiChkboxCnt();

            // Check Max no of record selected
            int maxSiToSelect = Integer.parseInt(am.plGetSyspara("P_MAX_SI_PRINT"));
            if (noOfSelectedRecord > maxSiToSelect)
                throw new JboException(am.plGetMsgmst("4550").replace("##F01##", Integer.toString(maxSiToSelect)));

            // Get Parameters for calling the FORM
            String minSiNo = null, maxSiNo = null, printType = null, concatInvNo = "";
            int noOfConcatInv = 0;
            if (noOfSelectedRecord == 0) {
                // Validation
                if (curRow.getCimsStscod().equals("DE")) {
                    throw new JboException(am.plGetMsgmst("1052"));
                }

                minSiNo = curRow.getCimsDocnbr();
                maxSiNo = curRow.getCimsDocnbr();
                printType = "R";
                concatInvNo = null;
                noOfConcatInv = 0;
            } else {

                minSiNo = curRow.getCimsDocnbr();
                maxSiNo = curRow.getCimsDocnbr();
                printType = "S";

                int estimatedRangePageCount = this.getEstimatedRangePageCount();
                int noOfProcessRecord = 0;
                for (int i = 0; i < estimatedRangePageCount; i++) {
                    this.scrollToRangePage(i + 1);
                    Row[] rows = this.getAllRowsInRange();
                    for (Row row : rows) {

                        // Loop through all the rows in current page
                        TciMstVORowImpl rowTciMst = (TciMstVORowImpl) row;
                        if (rowTciMst.getSelection() != null && rowTciMst.getSelection()) {
                            // Validation
                            if (rowTciMst.getCimsStscod().equals("DE")) {
                                throw new JboException(am.plGetMsgmst("1052"));
                            }
                            // If success
                            concatInvNo = concatInvNo.concat(rowTciMst.getCimsDocnbr()).concat(",");
                            noOfConcatInv++;
                            rowTciMst.setSelection(false);
                            noOfProcessRecord++;
                        }

                        if (noOfSelectedRecord == noOfProcessRecord) {
                            break;
                        }
                    }
                    if (noOfSelectedRecord == noOfProcessRecord) {
                        break;
                    }
                }

                if (concatInvNo != null) {
                    if (concatInvNo.length() - 1 == concatInvNo.lastIndexOf(",")) {
                        concatInvNo = concatInvNo.substring(0, concatInvNo.lastIndexOf(",")).trim();
                    }
                }

            }

            if (minSiNo != null && maxSiNo != null) {
                String mpmtMenuGrp = "SHP_INV";
                String mpmtMenuItem = "SI_PRINT";

                callFormURL =
                    "MPMT_MENUGRP=" + mpmtMenuGrp + "&MPMT_MENUITEM=" + mpmtMenuItem + "&P_SI_NO_FROM=" + minSiNo + "&P_SI_NO_TO=" + maxSiNo +
                    "&P_SI_PRINT_TYPE=" + printType + "&P_CONCAT_SI_NO=" + concatInvNo + "&P_NO_OF_CONCAT_SI=" + noOfConcatInv + "&P_ADF_DIVCOD=" + curRow.getCimsDivcod();


                LOGGER.info("callFormURL: " + callFormURL);
            }
        }

        return callFormURL;

    }

    public String selectAllValueChange(boolean isSelect) {
        XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
        String warning = null;

        if (this.getViewDef().getAttributeIndexOf("Selection") != -1) {

            int estimatedRangePageCount = this.getEstimatedRangePageCount();
            int noOfProcessRecord = 0;

            for (int i = 0; i < estimatedRangePageCount; i++) {
                this.scrollToRangePage(i + 1);
                Row[] rows = this.getAllRowsInRange();
                for (Row row : rows) {

                    if (noOfProcessRecord == selectAllMax) {
                        if (isSelect) {
                            warning = am.plGetMsgmst("4504").replace("##F01##", String.valueOf(selectAllMax));
                        }
                        break;
                    }
                    // Loop through all the rows in current page
                    TciMstVORowImpl rowTciMst = (TciMstVORowImpl) row;
                    if (rowTciMst != null) {
                        if ((rowTciMst.getSelection() == null && isSelect) || (rowTciMst.getSelection() != isSelect))
                            rowTciMst.setSelection(isSelect);
                        noOfProcessRecord++;
                    }

                }
            }

            LOGGER.info("# of Processed records: " + noOfProcessRecord);
        }

        return warning;
    }

    /**
     * Returns the variable value for cimsInvDatFromCoreVar.
     * @return variable value for cimsInvDatFromCoreVar
     */
    public Date getcimsInvDatFromCoreVar() {
        return (Date) ensureVariableManager().getVariableValue("cimsInvDatFromCoreVar");
    }

    /**
     * Sets <code>value</code> for variable cimsInvDatFromCoreVar.
     * @param value value to bind as cimsInvDatFromCoreVar
     */
    public void setcimsInvDatFromCoreVar(Date value) {
        ensureVariableManager().setVariableValue("cimsInvDatFromCoreVar", value);
    }

    /**
     * Returns the variable value for cimsInvDatToCoreVar.
     * @return variable value for cimsInvDatToCoreVar
     */
    public Date getcimsInvDatToCoreVar() {
        return (Date) ensureVariableManager().getVariableValue("cimsInvDatToCoreVar");
    }

    /**
     * Sets <code>value</code> for variable cimsInvDatToCoreVar.
     * @param value value to bind as cimsInvDatToCoreVar
     */
    public void setcimsInvDatToCoreVar(Date value) {
        ensureVariableManager().setVariableValue("cimsInvDatToCoreVar", value);
    }

    /**
     * Returns the variable value for cimsShpDatFromCoreVar.
     * @return variable value for cimsShpDatFromCoreVar
     */
    public Date getcimsShpDatFromCoreVar() {
        return (Date) ensureVariableManager().getVariableValue("cimsShpDatFromCoreVar");
    }

    /**
     * Sets <code>value</code> for variable cimsShpDatFromCoreVar.
     * @param value value to bind as cimsShpDatFromCoreVar
     */
    public void setcimsShpDatFromCoreVar(Date value) {
        ensureVariableManager().setVariableValue("cimsShpDatFromCoreVar", value);
    }

    /**
     * Returns the variable value for cimsShpDatToCoreVar.
     * @return variable value for cimsShpDatToCoreVar
     */
    public Date getcimsShpDatToCoreVar() {
        return (Date) ensureVariableManager().getVariableValue("cimsShpDatToCoreVar");
    }

    /**
     * Sets <code>value</code> for variable cimsShpDatToCoreVar.
     * @param value value to bind as cimsShpDatToCoreVar
     */
    public void setcimsShpDatToCoreVar(Date value) {
        ensureVariableManager().setVariableValue("cimsShpDatToCoreVar", value);
    }


    /**
     * Returns the variable value for userIdVar.
     * @return variable value for userIdVar
     */
    public String getuserIdVar() {
        return (String) ensureVariableManager().getVariableValue("userIdVar");
    }

    /**
     * Sets <code>value</code> for variable userIdVar.
     * @param value value to bind as userIdVar
     */
    public void setuserIdVar(String value) {
        ensureVariableManager().setVariableValue("userIdVar", value);
    }

    /**
     * Returns the variable value for cimsDivcodAdvVar.
     * @return variable value for cimsDivcodAdvVar
     */
    public String getcimsDivcodAdvVar() {
        return (String) ensureVariableManager().getVariableValue("cimsDivcodAdvVar");
    }

    /**
     * Sets <code>value</code> for variable cimsDivcodAdvVar.
     * @param value value to bind as cimsDivcodAdvVar
     */
    public void setcimsDivcodAdvVar(String value) {
        ensureVariableManager().setVariableValue("cimsDivcodAdvVar", value);
    }


    /**
     * Returns the variable value for cimsDivcodVar.
     * @return variable value for cimsDivcodVar
     */
    public String getcimsDivcodVar() {
        return (String) ensureVariableManager().getVariableValue("cimsDivcodVar");
    }

    /**
     * Sets <code>value</code> for variable cimsDivcodVar.
     * @param value value to bind as cimsDivcodVar
     */
    public void setcimsDivcodVar(String value) {
        ensureVariableManager().setVariableValue("cimsDivcodVar", value);
    }

    /**
     * Returns the variable value for cimsRunnumVar.
     * @return variable value for cimsRunnumVar
     */
    public Long getcimsRunnumVar() {
        return (Long) ensureVariableManager().getVariableValue("cimsRunnumVar");
    }

    /**
     * Sets <code>value</code> for variable cimsRunnumVar.
     * @param value value to bind as cimsRunnumVar
     */
    public void setcimsRunnumVar(Long value) {
        ensureVariableManager().setVariableValue("cimsRunnumVar", value);
    }


    /**
     * Returns the variable value for poNumAdvVar.
     * @return variable value for poNumAdvVar
     */
    public String getpoNumAdvVar() {
        return (String) ensureVariableManager().getVariableValue("poNumAdvVar");
    }

    /**
     * Sets <code>value</code> for variable poNumAdvVar.
     * @param value value to bind as poNumAdvVar
     */
    public void setpoNumAdvVar(String value) {
        ensureVariableManager().setVariableValue("poNumAdvVar", value);
    }


    /**
     * Returns the variable value for soNumAdvVar.
     * @return variable value for soNumAdvVar
     */
    public String getsoNumAdvVar() {
        return (String) ensureVariableManager().getVariableValue("soNumAdvVar");
    }

    /**
     * Sets <code>value</code> for variable soNumAdvVar.
     * @param value value to bind as soNumAdvVar
     */
    public void setsoNumAdvVar(String value) {
        ensureVariableManager().setVariableValue("soNumAdvVar", value);
    }


    /**
     * Returns the variable value for cimsDivcodCoreVar.
     * @return variable value for cimsDivcodCoreVar
     */
    public String getcimsDivcodCoreVar() {
        return (String) ensureVariableManager().getVariableValue("cimsDivcodCoreVar");
    }

    /**
     * Sets <code>value</code> for variable cimsDivcodCoreVar.
     * @param value value to bind as cimsDivcodCoreVar
     */
    public void setcimsDivcodCoreVar(String value) {
        ensureVariableManager().setVariableValue("cimsDivcodCoreVar", value);
    }

    /**
     * Returns the variable value for soNumCoreVar.
     * @return variable value for soNumCoreVar
     */
    public String getsoNumCoreVar() {
        return (String) ensureVariableManager().getVariableValue("soNumCoreVar");
    }

    /**
     * Sets <code>value</code> for variable soNumCoreVar.
     * @param value value to bind as soNumCoreVar
     */
    public void setsoNumCoreVar(String value) {
        ensureVariableManager().setVariableValue("soNumCoreVar", value);
    }

    /**
     * Returns the variable value for poNumCoreVar.
     * @return variable value for poNumCoreVar
     */
    public String getpoNumCoreVar() {
        return (String) ensureVariableManager().getVariableValue("poNumCoreVar");
    }

    /**
     * Sets <code>value</code> for variable poNumCoreVar.
     * @param value value to bind as poNumCoreVar
     */
    public void setpoNumCoreVar(String value) {
        ensureVariableManager().setVariableValue("poNumCoreVar", value);
    }

    /**
     * Returns the variable value for invNumAdvVar.
     * @return variable value for invNumAdvVar
     */
    public String getinvNumAdvVar() {
        return (String) ensureVariableManager().getVariableValue("invNumAdvVar");
    }

    /**
     * Sets <code>value</code> for variable invNumAdvVar.
     * @param value value to bind as invNumAdvVar
     */
    public void setinvNumAdvVar(String value) {
        ensureVariableManager().setVariableValue("invNumAdvVar", value);
    }

    /**
     * Returns the variable value for cimsInvDatFromAdvVar.
     * @return variable value for cimsInvDatFromAdvVar
     */
    public Date getcimsInvDatFromAdvVar() {
        return (Date) ensureVariableManager().getVariableValue("cimsInvDatFromAdvVar");
    }

    /**
     * Sets <code>value</code> for variable cimsInvDatFromAdvVar.
     * @param value value to bind as cimsInvDatFromAdvVar
     */
    public void setcimsInvDatFromAdvVar(Date value) {
        ensureVariableManager().setVariableValue("cimsInvDatFromAdvVar", value);
    }

    /**
     * Returns the variable value for cimsInvDatToAdvVar.
     * @return variable value for cimsInvDatToAdvVar
     */
    public Date getcimsInvDatToAdvVar() {
        return (Date) ensureVariableManager().getVariableValue("cimsInvDatToAdvVar");
    }

    /**
     * Sets <code>value</code> for variable cimsInvDatToAdvVar.
     * @param value value to bind as cimsInvDatToAdvVar
     */
    public void setcimsInvDatToAdvVar(Date value) {
        ensureVariableManager().setVariableValue("cimsInvDatToAdvVar", value);
    }

    /**
     * Returns the variable value for cimsShpdatFromAdvVar.
     * @return variable value for cimsShpdatFromAdvVar
     */
    public Date getcimsShpdatFromAdvVar() {
        return (Date) ensureVariableManager().getVariableValue("cimsShpdatFromAdvVar");
    }

    /**
     * Sets <code>value</code> for variable cimsShpdatFromAdvVar.
     * @param value value to bind as cimsShpdatFromAdvVar
     */
    public void setcimsShpdatFromAdvVar(Date value) {
        ensureVariableManager().setVariableValue("cimsShpdatFromAdvVar", value);
    }

    /**
     * Returns the variable value for cimsShpdatToAdvVar.
     * @return variable value for cimsShpdatToAdvVar
     */
    public Date getcimsShpdatToAdvVar() {
        return (Date) ensureVariableManager().getVariableValue("cimsShpdatToAdvVar");
    }

    /**
     * Sets <code>value</code> for variable cimsShpdatToAdvVar.
     * @param value value to bind as cimsShpdatToAdvVar
     */
    public void setcimsShpdatToAdvVar(Date value) {
        ensureVariableManager().setVariableValue("cimsShpdatToAdvVar", value);
    }


}

