package xts.salinv.model.views;

import java.math.BigDecimal;

import oracle.adf.share.ADFContext;

import oracle.jbo.RowSet;

import xts.common.model.framework.GenericViewRowImpl;
import xts.common.model.framework.beans.DisabledLogicContainerModel;

import xts.salinv.model.services.XTSSalInvAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 30 15:42:00 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TciCusfldShpitmVORowImpl extends GenericViewRowImpl {

    @Override
    public Boolean calculateDisabled(String attrName) {
        boolean disabled = super.calculateDisabled(attrName);

        if (!disabled) {
            if (ADFContext.getCurrent().isJEE()) {
                DisabledLogicContainerModel disabledControlModel = (DisabledLogicContainerModel) ADFContext.getCurrent()
                                                                                                           .getPageFlowScope()
                                                                                                           .get("XTSDisabledLogicContainerBean");
                XTSSalInvAMImpl am = (XTSSalInvAMImpl) this.getApplicationModule();
                TciMstVORowImpl mstRow = (TciMstVORowImpl) am.getTciMstVO().getCurrentRow();
                String mstKey = "TCI_MST:" + mstRow.getCimsDivcod() + "|" + mstRow.getCimsRunnum().toString();

                String sts = (String) disabledControlModel.getData(mstKey, "CimsStscod");
                if (sts.equalsIgnoreCase("DE"))
                    return true;
            }
        }

        return super.calculateDisabled(attrName);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        DefInd,
        FieldId,
        FieldLabel,
        DataType,
        IsMsttab,
        Seq,
        CfDivcod,
        TdDivcod,
        DmModule,
        TdModule,
        TdFldId,
        DmFldId,
        Runnum,
        Itmseq,
        SoRunnum,
        Shiseq,
        FldDbVal,
        FldEditVal,
        DisplayLabel,
        MstlstDesc,
        TmpCusfldCodLovVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DEFIND = AttributesEnum.DefInd.index();
    public static final int FIELDID = AttributesEnum.FieldId.index();
    public static final int FIELDLABEL = AttributesEnum.FieldLabel.index();
    public static final int DATATYPE = AttributesEnum.DataType.index();
    public static final int ISMSTTAB = AttributesEnum.IsMsttab.index();
    public static final int SEQ = AttributesEnum.Seq.index();
    public static final int CFDIVCOD = AttributesEnum.CfDivcod.index();
    public static final int TDDIVCOD = AttributesEnum.TdDivcod.index();
    public static final int DMMODULE = AttributesEnum.DmModule.index();
    public static final int TDMODULE = AttributesEnum.TdModule.index();
    public static final int TDFLDID = AttributesEnum.TdFldId.index();
    public static final int DMFLDID = AttributesEnum.DmFldId.index();
    public static final int RUNNUM = AttributesEnum.Runnum.index();
    public static final int ITMSEQ = AttributesEnum.Itmseq.index();
    public static final int SORUNNUM = AttributesEnum.SoRunnum.index();
    public static final int SHISEQ = AttributesEnum.Shiseq.index();
    public static final int FLDDBVAL = AttributesEnum.FldDbVal.index();
    public static final int FLDEDITVAL = AttributesEnum.FldEditVal.index();
    public static final int DISPLAYLABEL = AttributesEnum.DisplayLabel.index();
    public static final int MSTLSTDESC = AttributesEnum.MstlstDesc.index();
    public static final int TMPCUSFLDCODLOVVO1 = AttributesEnum.TmpCusfldCodLovVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TciCusfldShpitmVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute DefInd.
     * @return the DefInd
     */
    public String getDefInd() {
        return (String) getAttributeInternal(DEFIND);
    }

    /**
     * Gets the attribute value for the calculated attribute FieldId.
     * @return the FieldId
     */
    public Integer getFieldId() {
        return (Integer) getAttributeInternal(FIELDID);
    }

    /**
     * Gets the attribute value for the calculated attribute FieldLabel.
     * @return the FieldLabel
     */
    public String getFieldLabel() {
        return (String) getAttributeInternal(FIELDLABEL);
    }

    /**
     * Gets the attribute value for the calculated attribute DataType.
     * @return the DataType
     */
    public String getDataType() {
        return (String) getAttributeInternal(DATATYPE);
    }

    /**
     * Gets the attribute value for the calculated attribute IsMsttab.
     * @return the IsMsttab
     */
    public String getIsMsttab() {
        return (String) getAttributeInternal(ISMSTTAB);
    }

    /**
     * Gets the attribute value for the calculated attribute Seq.
     * @return the Seq
     */
    public BigDecimal getSeq() {
        return (BigDecimal) getAttributeInternal(SEQ);
    }

    /**
     * Gets the attribute value for the calculated attribute CfDivcod.
     * @return the CfDivcod
     */
    public String getCfDivcod() {
        return (String) getAttributeInternal(CFDIVCOD);
    }

    /**
     * Gets the attribute value for the calculated attribute TdDivcod.
     * @return the TdDivcod
     */
    public String getTdDivcod() {
        return (String) getAttributeInternal(TDDIVCOD);
    }

    /**
     * Gets the attribute value for the calculated attribute DmModule.
     * @return the DmModule
     */
    public String getDmModule() {
        return (String) getAttributeInternal(DMMODULE);
    }

    /**
     * Gets the attribute value for the calculated attribute TdModule.
     * @return the TdModule
     */
    public String getTdModule() {
        return (String) getAttributeInternal(TDMODULE);
    }

    /**
     * Gets the attribute value for the calculated attribute TdFldId.
     * @return the TdFldId
     */
    public BigDecimal getTdFldId() {
        return (BigDecimal) getAttributeInternal(TDFLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute DmFldId.
     * @return the DmFldId
     */
    public Integer getDmFldId() {
        return (Integer) getAttributeInternal(DMFLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute Runnum.
     * @return the Runnum
     */
    public BigDecimal getRunnum() {
        return (BigDecimal) getAttributeInternal(RUNNUM);
    }

    /**
     * Gets the attribute value for the calculated attribute Itmseq.
     * @return the Itmseq
     */
    public BigDecimal getItmseq() {
        return (BigDecimal) getAttributeInternal(ITMSEQ);
    }

    /**
     * Gets the attribute value for the calculated attribute SoRunnum.
     * @return the SoRunnum
     */
    public BigDecimal getSoRunnum() {
        return (BigDecimal) getAttributeInternal(SORUNNUM);
    }

    /**
     * Gets the attribute value for the calculated attribute Shiseq.
     * @return the Shiseq
     */
    public BigDecimal getShiseq() {
        return (BigDecimal) getAttributeInternal(SHISEQ);
    }

    /**
     * Gets the attribute value for the calculated attribute FldDbVal.
     * @return the FldDbVal
     */
    public String getFldDbVal() {
        return (String) getAttributeInternal(FLDDBVAL);
    }

    /**
     * Gets the attribute value for the calculated attribute FldEditVal.
     * @return the FldEditVal
     */
    public String getFldEditVal() {
        return (String) getAttributeInternal(FLDEDITVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldEditVal.
     * @param value value to set the  FldEditVal
     */
    public void setFldEditVal(String value) {
        setAttributeInternal(FLDEDITVAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DisplayLabel.
     * @return the DisplayLabel
     */
    public String getDisplayLabel() {
        return (String) getAttributeInternal(DISPLAYLABEL);
    }

    /**
     * Gets the attribute value for the calculated attribute MstlstDesc.
     * @return the MstlstDesc
     */
    public String getMstlstDesc() {
        return (String) getAttributeInternal(MSTLSTDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MstlstDesc.
     * @param value value to set the  MstlstDesc
     */
    public void setMstlstDesc(String value) {
        setAttributeInternal(MSTLSTDESC, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TmpCusfldCodLovVO1.
     */
    public RowSet getTmpCusfldCodLovVO1() {
        return (RowSet) getAttributeInternal(TMPCUSFLDCODLOVVO1);
    }
}

